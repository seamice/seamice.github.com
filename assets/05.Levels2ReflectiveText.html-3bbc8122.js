import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as d,b as e,d as o,e as t,w as c,f as n}from"./app-7f852aec.js";const h="/data/HS/data/dataset.png",f="/data/HS/data/distribution_final.png",p="/data/HS/data/distribution_first.png",u="/data/HS/data/distribution_second.png",m="/data/HS/data/diff_1st.png",g="/data/HS/data/diff_2nd.png",v={},b=e("h2",{id:"implementation-on-google-colab",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#implementation-on-google-colab","aria-hidden":"true"},"#"),o(" Implementation on google colab")],-1),_={href:"https://colab.research.google.com/drive/1EPxMGd9swV3lnJuVThK3cAepl6zrlX0w?usp=sharing",target:"_blank",rel:"noopener noreferrer"},x=n('<h2 id="dataset" tabindex="-1"><a class="header-anchor" href="#dataset" aria-hidden="true">#</a> Dataset</h2><p>The dataset is <a href="/data/HS/data/Manuallycoded.Answers.csv">Manuallycoded.Answers</a></p><p>There are 6 columns with this dataset, which are <code>module_id</code>, <code>student_id</code>, <code>Answers</code>, <code>Question</code>, <code>Group</code>, <code>Final</code> like the picture below.<br><img src="'+h+`" alt="Snap for datasets" loading="lazy"></p><ol><li><code>module_id</code>: relative to question.</li><li><code>student_id</code>: student id</li><li><code>Answers</code>: The answer for the relative question, the data need to be classified.</li><li><code>Question</code>: The question for answer.</li><li><code>Group</code>: relative to question.</li><li><code>Final</code>: represent the levels, from 1 to 4 correspond to [<code>No-Reflection</code>, <code>Understanding</code>, <code>Simple Reflection</code>, <code>Critical Reflection</code>]</li></ol><h2 id="levels-definition" tabindex="-1"><a class="header-anchor" href="#levels-definition" aria-hidden="true">#</a> Levels definition</h2><ol><li><strong>No-Reflection</strong>: Professionals do not indicate any significant reflective thought processes and mainly mirror the words and phrases from the question or give a general comment.</li><li><strong>Understanding</strong>: Professionals indicate an understanding of concepts or topics from demonstrating a practical application of theory, yet lack specific details of professional or real-life experiences.</li><li><strong>Simple Reflection</strong>: Professionals indicate an understanding of the theory in unison with examples of practical application, yet only provide a vague explanation of future actions or outcomes. They do not provide concrete examples of action or application for the future.</li><li><strong>Critical Reflection</strong>: Besides relating the theory with examples from real-life experiences, professionals indicate what they are likely to do in the future or what they need to work on. In some cases, professionals might also reflect a change in their perspective.</li></ol><h2 id="tasks" tabindex="-1"><a class="header-anchor" href="#tasks" aria-hidden="true">#</a> Tasks</h2><p>Using openai to <strong>classify</strong> the <strong>answers</strong> to a specified level based on the level definitions and question.</p><p><em><strong>Parameters for openai</strong></em></p><ol><li>model: <code>gpt-4-0314</code></li><li>others: default values</li></ol><h2 id="prompt-result" tabindex="-1"><a class="header-anchor" href="#prompt-result" aria-hidden="true">#</a> Prompt &amp; result</h2><h3 id="prompt" tabindex="-1"><a class="header-anchor" href="#prompt" aria-hidden="true">#</a> Prompt</h3><p>The prompt should be defined as the content below:</p><p><strong>System prompt</strong></p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>There are four levels definition for reflection content as below.

Level definitions:
No-Reflection: Professionals do not indicate any significant reflective thought processes and mainly mirror the words and phrases from the question or give a general comment.
Understanding: Professionals indicate an understanding of concepts or topics from demonstrating a practical application of theory, yet lack specific details of professional or real-life experiences.
Simple Reflection: Professionals indicate an understanding of the theory in unison with examples of practical application, yet only provide a vague explanation of future actions or outcomes. They do not provide concrete examples of action or application for the future.
Critical Reflection: Besides relating the theory with examples from real-life experiences, professionals indicate what they are likely to do in the future or what they need to work on. In some cases, professionals might also reflect a change in their perspective.

Question:
&quot;&quot;&quot;[question]&quot;&quot;&quot;

Please define the level based on the level definitions and question above. The result should be json format, like 
{&quot;level&quot;: [The level result]}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>User Prompt</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[Answer text]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="result" tabindex="-1"><a class="header-anchor" href="#result" aria-hidden="true">#</a> Result</h3><p>The dataset has <span style="color:orange;">been processed with two times</span>. All the result will be listed below.</p><p>The distribution for the <code>final</code> column in the original dataset.</p>`,20),y=e("figure",null,[e("img",{src:f,alt:"Distribution of Final Column",width:"400",tabindex:"0",loading:"lazy"}),e("figcaption",null,"Distribution of Final Column")],-1),w=n('<hr><p>The results for the distribution from the openai.</p><div style="display:flex;"><div style="flex:1;"><figure><img src="'+p+'" alt="Distribution of the First Time" tabindex="0" loading="lazy"><figcaption>Distribution of the First Time</figcaption></figure></div><div style="flex:1;"><figure><img src="'+u+'" alt="Distribution of the Second Time" tabindex="0" loading="lazy"><figcaption>Distribution of the Second Time</figcaption></figure></div></div><hr><p>If we regard <code>final</code> column as a baseline. The difference is the result from openai minus baseline. If the result is 0, it means the result remains the same with the same with baseline. If the result is a positive value, it means the openai gives a higher level than baseline; else if the result is a negative value, it means the openai gives a lower level than baseline.</p><div style="display:flex;"><div style="flex:1;"><figure><img src="'+m+'" alt="Difference with the first time" tabindex="0" loading="lazy"><figcaption>Difference with the first time</figcaption></figure></div><div style="flex:1;"><figure><img src="'+g+'" alt="Difference with the second time" tabindex="0" loading="lazy"><figcaption>Difference with the second time</figcaption></figure></div></div><p>According to the results above, the level from openai normally give a higher level than baseline. The difference is mostly 1.</p>',7);function T(q,k){const a=i("ExternalLinkIcon"),s=i("center");return l(),d("div",null,[b,e("p",null,[e("a",_,[o("Implementation on Google Colab"),t(a)])]),x,t(s,null,{default:c(()=>[y]),_:1}),w])}const R=r(v,[["render",T],["__file","05.Levels2ReflectiveText.html.vue"]]);export{R as default};
