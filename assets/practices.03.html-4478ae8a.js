import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,f as s}from"./app-a557bb6d.js";const n={},t=s(`<h2 id="week-8-data-stream-mining" tabindex="-1"><a class="header-anchor" href="#week-8-data-stream-mining" aria-hidden="true">#</a> Week 8: Data Stream Mining</h2><p>In this practical, we use the stream R package for analysing stream data. Please install the stream package to complete the practical.</p><h3 id="i-creating-a-data-stream" tabindex="-1"><a class="header-anchor" href="#i-creating-a-data-stream" aria-hidden="true">#</a> I. Creating a data stream</h3><ol><li><p>We firstly create a generator to generate stream data points that will belong to one of three clusters <code>(k=3)</code>. Each data point will have 2 dimensions <code>(d=2)</code>. The data points will follow Gaussian distribution with 5% noise. When a new data point is requested from this data generator, a cluster will be chosen randomly using the probability weights in <code>p</code>.</p><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>library(&quot;stream&quot;)
stream &lt;- DSD_Gaussians(k = 3, d = 2, noise = .05, p = c(.5, .3, .1))
stream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Generate 5 data points using the generator.</p></li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>p &lt;- get_points(stream, n = 5)
p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Use option <code>class=TRUE</code> to see which cluster a data point belongs to. Please note that noise data points (5%) do have the class labels (NA).</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>p &lt;- get_points(stream, n = 10, class = TRUE)
p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Plot the 500 points from the data stream</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>plot(stream, n=500)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ii-reading-and-writing-data-streams" tabindex="-1"><a class="header-anchor" href="#ii-reading-and-writing-data-streams" aria-hidden="true">#</a> II. Reading and writing data streams</h3><ol><li>Write the created stream with 100 data points to a file called data.csv</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>write_stream(stream, &quot;data.csv&quot;, n = 100, sep = &quot;,&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Read back the data.csv file to R.</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>stream_data = DSD_ReadStream(&quot;data.csv&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Note that the data has not been read to the stream_data until we use get_points</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>get_points(stream_data, n=5)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="iii-reservoir-sampling" tabindex="-1"><a class="header-anchor" href="#iii-reservoir-sampling" aria-hidden="true">#</a> III. Reservoir Sampling</h3><ol><li>Create a stream with 3 clusters and 5% noise</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>stream &lt;- DSD_Gaussians(k = 3, d = 2, noise = .05, p = c(.5, .3, .1))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Create a Reservoir sampling mechanism with 20 points will be sampled from the stream</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>sample &lt;- DSAggregate_Sample(k = 20)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Update the data for sample using 500 data points from stream</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>update(sample, stream, 500)
sample
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Get the data from sample</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>get_points(sample)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>Plot the data points in sample</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>plot(get_points(sample))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="iv-data-stream-clustering" tabindex="-1"><a class="header-anchor" href="#iv-data-stream-clustering" aria-hidden="true">#</a> IV. Data Stream Clustering</h3><ol><li>We firstly prepare the clustering algorithm. We use DSC_DStream which implements the D-Stream algorithm (Tu and Chen 2009). D-Stream assigns points to cells in a grid. For the example we use a gridsize of 0.1.</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>dstream &lt;- DSC_DStream(gridsize = .1, Cm = 1.2)
dstream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>The clusters are currently empty, but they are ready to get data points from the stream.</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>update(dstream, stream, n = 500)
dstream

plot(dstream, stream)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>There are a number of micro-clusters. We can get the centers of the micro-clusters using:</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>head(get_centers(dstream))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="week-10-data-stream-mining" tabindex="-1"><a class="header-anchor" href="#week-10-data-stream-mining" aria-hidden="true">#</a> Week 10: Data Stream Mining</h2><h3 id="i-evaluation-of-data-stream-clustering" tabindex="-1"><a class="header-anchor" href="#i-evaluation-of-data-stream-clustering" aria-hidden="true">#</a> I. Evaluation of data stream clustering</h3><p>Internal evaluation measures:</p><ul><li>“average.between” Average distance between clusters</li><li>“average.within” Average distance within clusters</li><li>“max.diameter” Maximum cluster diameter</li><li>“entropy” entropy of the distribution of cluster memberships</li></ul><p>External evaluation measures:</p><ul><li>“precision” and “recall”: <ul><li>Precision=TP/(TP+FP)</li><li>Recall=TP/(TP+FN)</li></ul></li><li>“purity”: Average purity of clusters. The purity of each cluster is the proportion of the points of the majority true group assigned to it.</li><li>“Euclidean”: Euclidean dissimilarity of the memberships</li></ul><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>library(&quot;stream&quot;)
stream &lt;- DSD_Gaussians(k = 3, d = 2, noise = .05)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>Use Reservoir sampling to generate 100 data points and use K-means to generate 4 clusters.</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>Reservoir_Kmeans = DSC_TwoStage(micro = DSC_Sample(k = 100), macro = DSC_Kmeans(k = 4))
update(Reservoir_Kmeans, stream, n=500)
Reservoir_Kmeans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>plot(Reservoir_Kmeans, stream)
evaluate_static(Reservoir_Kmeans, stream, measure =c(&quot;average.between&quot;, &quot;precision&quot;, &quot;recall&quot;), n =500)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Use sliding window method rather than Reservoir sampling in the above example. Compare the precision and recall of the two methods.</li></ol><div class="hint-container info"><p class="hint-container-title">Hint</p><p>Window_Kmeans = DSC_TwoStage(micro = DSC_Window(horizon = 100), macro = DSC_Kmeans(k = 4)).</p></div><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>Window_Kmeans = DSC_TwoStage(micro = DSC_Window(horizon = 100), macro = DSC_Kmeans(k = 4))
update(Window_Kmeans, stream, n=500)
Window_Kmeans

plot(Window_Kmeans, stream)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>evaluate_static(Window_Kmeans, stream,measure = c(&quot;average.between&quot;,&quot;precision&quot;,&quot;recall&quot;), n =500)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ii-concept-drift" tabindex="-1"><a class="header-anchor" href="#ii-concept-drift" aria-hidden="true">#</a> II. Concept Drift</h3><p>Concept drift means the changes of the data generating process over time. It implies that the statistical properties of the data also change when time passes. A good data mining algorithm should be able to deal with concept drift. In the stream package, DSD_Benchmark(1) is an example data stream which contains concept drift. To show the concept drift we request four times 250 data points from the stream and plot them. To fast-forward in the stream we request 1400 points in between the plots and ignore them. The codes below will show 4 figures of the data at different time points.</p><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>stream &lt;- DSD_Benchmark(1)
stream
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>for(i in 1:4) {
    plot(stream, 250, xlim = c(0, 1), ylim = c(0, 1))
    tmp &lt;- get_points(stream, n = 1400)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can use animation package to demonstrate this:</p><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>reset_stream(stream)
animate_data(stream, n = 10000, horizon = 100
, xlim = c(0, 1), ylim = c(0, 1))
library(&quot;animation&quot;)
animation::ani.options(interval = .1)
ani.replay()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iii-evaluation-of-data-stream-clustering-with-concept-drift" tabindex="-1"><a class="header-anchor" href="#iii-evaluation-of-data-stream-clustering-with-concept-drift" aria-hidden="true">#</a> III. Evaluation of data stream clustering with concept drift</h3><ol><li>Using Reservoir sampling and K-means</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>stream = DSD_Benchmark(1)
Reservoir_Kmeans= DSC_TwoStage(micro = DSC_Sample(k = 100, biased = TRUE), macro = DSC_Kmeans(k = 2))
update(Reservoir_Kmeans, stream, n=500)
plot(Reservoir_Kmeans, stream)


evaluate_stream(Reservoir_Kmeans, stream, measure = c( &quot;precision&quot;, &quot;recall&quot;), n =5000, horizon=100)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Evaluate the Sliding window + K-means clustering</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>#2. Sliding window + K-means clustering
Window_Kmeans = DSC_TwoStage(micro = DSC_Sample(k = 100, biased = TRUE), macro = DSC_Kmeans(k = 2))
update(Window_Kmeans, stream, n=500)
Window_Kmeans

plot(Window_Kmeans, stream)

evaluate_static(Window_Kmeans, stream, measure = c(&quot;precision&quot;, &quot;recall&quot;), n =5000, orizon=100)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,59),r=[t];function l(d,o){return a(),i("div",null,r)}const u=e(n,[["render",l],["__file","practices.03.html.vue"]]);export{u as default};
