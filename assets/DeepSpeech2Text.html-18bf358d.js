import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as i,b as n,d as s,e,f as c}from"./app-e8e80e36.js";const l={},u=n("h2",{id:"what-is-deepspeech",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#what-is-deepspeech","aria-hidden":"true"},"#"),s(" What is DeepSpeech")],-1),r={href:"https://arxiv.org/abs/1412.5567",target:"_blank",rel:"noopener noreferrer"},d=c(`<h2 id="local-speech-to-text" tabindex="-1"><a class="header-anchor" href="#local-speech-to-text" aria-hidden="true">#</a> Local Speech to Text</h2><p>The libraries are needed.</p><ol><li><code>deepspeech</code></li><li><code>numpy</code></li><li><code>webrtcvad</code>: voice activity detection (VAD) library developed by Google for WebRTC (real time communication).<br> To install all the libraries using the command</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> deepspeech numpy webrtcvad
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>For the asynchronous transcription, three files are needed, which are</p><ol><li>One file to handle interaction with WAV data</li><li>one file to transcribe speech to text on a WAV file,</li><li>one to use these two in the command line<br> And also the pretrained DeepSpeech model and scorer are needed.<br> To download the files using the commands</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/mozilla/DeepSpeech/releases/download/v0.9.3/deepspeech-0.9.3-models.pbmm
<span class="token function">wget</span> https://github.com/mozilla/DeepSpeech/releases/download/v0.9.3/deepspeech-0.9.3-models.scorer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wav-handler" tabindex="-1"><a class="header-anchor" href="#wav-handler" aria-hidden="true">#</a> WAV Handler</h3><p><code>wav_handler.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> collections
<span class="token keyword">import</span> contextlib
<span class="token keyword">import</span> wave

<span class="token comment"># Reading Audio Data from a WAV file</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;Reads a .wav file.
Input: path to a .wav file
Output: tuple of pcm data, sample rate, and duration
&quot;&quot;&quot;</span>
<span class="token keyword">def</span> <span class="token function">read_wave</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    Let’s start with creating a function to read WAV files. This function will take an input,  this input is the path to a WAV file. The file will use the contextlib library to open the  WAV file and read in the contents as bytes. Next, we run multiple asserts on the WAV file -  it must have one channel, have a sample width of 2, have a sample rate of 8, 16, or 32 kHz.

    Once we have asserted that the WAV file is in the right format for processing, we extract the  frames. Next, we extract the pcm data from the frames and the duration from the metadata.  Finally, we return the PCM data, the sample rate, and the duration.
    &#39;&#39;&#39;</span>
    <span class="token keyword">with</span> contextlib<span class="token punctuation">.</span>closing<span class="token punctuation">(</span>wave<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> wf<span class="token punctuation">:</span>
        num_channels <span class="token operator">=</span> wf<span class="token punctuation">.</span>getnchannels<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> num_channels <span class="token operator">==</span> <span class="token number">1</span>
        sample_width <span class="token operator">=</span> wf<span class="token punctuation">.</span>getsampwidth<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> sample_width <span class="token operator">==</span> <span class="token number">2</span>
        sample_rate <span class="token operator">=</span> wf<span class="token punctuation">.</span>getframerate<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">assert</span> sample_rate <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token number">16000</span><span class="token punctuation">,</span> <span class="token number">32000</span><span class="token punctuation">)</span>
        frames <span class="token operator">=</span> wf<span class="token punctuation">.</span>getnframes<span class="token punctuation">(</span><span class="token punctuation">)</span>
        pcm_data <span class="token operator">=</span> wf<span class="token punctuation">.</span>readframes<span class="token punctuation">(</span>frames<span class="token punctuation">)</span>
        duration <span class="token operator">=</span> frames <span class="token operator">/</span> sample_rate
        <span class="token keyword">return</span> pcm_data<span class="token punctuation">,</span> sample_rate<span class="token punctuation">,</span> duration

<span class="token comment"># Writing Audio Data to a WAV file</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;Writes a .wav file.
Input: path to new .wav file, PCM audio data, and sample rate.
Output: a .wav file
&quot;&quot;&quot;</span>
<span class="token keyword">def</span> <span class="token function">write_wave</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> audio<span class="token punctuation">,</span> sample_rate<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    Now let’s create the function to write audio data to a WAV file. This function requires three parameters, the path to a file to write to, the audio data, and the sample rate. This function writes a WAV file in the same way that the read function asserts its parameters. All we do is here is set the channels, sample width, and frame rate and then write the audio frames.
    &#39;&#39;&#39;</span>
    <span class="token keyword">with</span> contextlib<span class="token punctuation">.</span>closing<span class="token punctuation">(</span>wave<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> wf<span class="token punctuation">:</span>
        wf<span class="token punctuation">.</span>setnchannels<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        wf<span class="token punctuation">.</span>setsampwidth<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        wf<span class="token punctuation">.</span>setframerate<span class="token punctuation">(</span>sample_rate<span class="token punctuation">)</span>
        wf<span class="token punctuation">.</span>writeframes<span class="token punctuation">(</span>audio<span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;Represents a &quot;frame&quot; of audio data.
Requires the number of byes, the timestamp of the frame, and the duration on init&quot;&quot;&quot;</span>
<span class="token keyword">class</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    We’re going to create a class called Frame to hold some information to represent our audio data and make it easier to handle. This object requires three parameters to be created: the bytes, the timestamp in the audio file, and the duration of the Frame.
    &#39;&#39;&#39;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span><span class="token builtin">bytes</span> <span class="token operator">=</span> <span class="token builtin">bytes</span>
        self<span class="token punctuation">.</span>timestamp <span class="token operator">=</span> timestamp
        self<span class="token punctuation">.</span>duration <span class="token operator">=</span> duration

<span class="token comment"># Creating Frames of Audio Data for DeepSpeech to Transcribe</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;Generates audio frames from PCM audio data.
Input: the desired frame duration in milliseconds, the PCM data, and
the sample rate.
Yields/Generates: Frames of the requested duration.
&quot;&quot;&quot;</span>
<span class="token keyword">def</span> <span class="token function">frame_generator</span><span class="token punctuation">(</span>frame_duration_ms<span class="token punctuation">,</span> audio<span class="token punctuation">,</span> sample_rate<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    this function as a frame generator or a frame factory that returns an iterator. This function requires three parameters: the frame duration in milliseconds, the audio data, and the sample rate.
    
    This function starts by deriving an interval of frames from the passed in sample rate and frame duration in milliseconds. We start at an offset and timestamp of 0. We also create a duration constant equal to the number of frames in a second.
    
    While the current offset can be incremented by the interval constant and be within the number of frames of the audio, we generate a Frame for each interval and then increment the timestamp and offset appropriately.
    &#39;&#39;&#39;</span>
    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sample_rate <span class="token operator">*</span> <span class="token punctuation">(</span>frame_duration_ms <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
    offset <span class="token operator">=</span> <span class="token number">0</span>
    timestamp <span class="token operator">=</span> <span class="token number">0.0</span>
    duration <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">/</span> sample_rate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>
    <span class="token keyword">while</span> offset <span class="token operator">+</span> n <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>audio<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> Frame<span class="token punctuation">(</span>audio<span class="token punctuation">[</span>offset<span class="token punctuation">:</span>offset <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> duration<span class="token punctuation">)</span>
        timestamp <span class="token operator">+=</span> duration
        offset <span class="token operator">+=</span> n

<span class="token comment"># Collecting Voice Activated Frames for Speech to Text with DeepSpeech</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;Filters out non-voiced audio frames.
Given a webrtcvad.Vad and a source of audio frames, yields only
the voiced audio.
Arguments:
sample_rate - The audio sample rate, in Hz.
frame_duration_ms - The frame duration in milliseconds.
padding_duration_ms - The amount to pad the window, in milliseconds.
vad - An instance of webrtcvad.Vad.
frames - a source of audio frames (sequence or generator).
Returns: A generator that yields PCM audio data.
&quot;&quot;&quot;</span>
<span class="token keyword">def</span> <span class="token function">vad_collector</span><span class="token punctuation">(</span>sample_rate<span class="token punctuation">,</span> frame_duration_ms<span class="token punctuation">,</span>
                  padding_duration_ms<span class="token punctuation">,</span> vad<span class="token punctuation">,</span> frames<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    function to collect all the frames that contain voice. This function requires a sample rate, the frame duration in milliseconds, the padding duration in milliseconds, a voice activation detector (VAD) from webrtcvad, and the audio data frames.

    The VAD algorithm uses a padded ring buffer and checks to see what percentage of the frames in the window are voiced. When the window reaches a 90% voiced frame rate, the VAD triggers and begins yielding audio frames. While generating frames, if the percentage of voiced audio data in the frame drops below 10%, it will stop generating frames.
    &#39;&#39;&#39;</span>
    num_padding_frames <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>padding_duration_ms <span class="token operator">/</span> frame_duration_ms<span class="token punctuation">)</span>
    <span class="token comment"># We use a deque for our sliding window/ring buffer.</span>
    ring_buffer <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span>maxlen<span class="token operator">=</span>num_padding_frames<span class="token punctuation">)</span>
    <span class="token comment"># We have two states: TRIGGERED and NOTTRIGGERED. We start in the</span>
    <span class="token comment"># NOTTRIGGERED state.</span>
    triggered <span class="token operator">=</span> <span class="token boolean">False</span>
    voiced_frames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> frame <span class="token keyword">in</span> frames<span class="token punctuation">:</span>
        is_speech <span class="token operator">=</span> vad<span class="token punctuation">.</span>is_speech<span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token builtin">bytes</span><span class="token punctuation">,</span> sample_rate<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> triggered<span class="token punctuation">:</span>
            ring_buffer<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> is_speech<span class="token punctuation">)</span><span class="token punctuation">)</span>
            num_voiced <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f <span class="token keyword">for</span> f<span class="token punctuation">,</span> speech <span class="token keyword">in</span> ring_buffer <span class="token keyword">if</span> speech<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token comment"># If we&#39;re NOTTRIGGERED and more than 90% of the frames in</span>
            <span class="token comment"># the ring buffer are voiced frames, then enter the</span>
            <span class="token comment"># TRIGGERED state.</span>
            <span class="token keyword">if</span> num_voiced <span class="token operator">&gt;</span> <span class="token number">0.9</span> <span class="token operator">*</span> ring_buffer<span class="token punctuation">.</span>maxlen<span class="token punctuation">:</span>
                triggered <span class="token operator">=</span> <span class="token boolean">True</span>
                <span class="token comment"># We want to yield all the audio we see from now until</span>
                <span class="token comment"># we are NOTTRIGGERED, but we have to start with the</span>
                <span class="token comment"># audio that&#39;s already in the ring buffer.</span>
                <span class="token keyword">for</span> f<span class="token punctuation">,</span> s <span class="token keyword">in</span> ring_buffer<span class="token punctuation">:</span>
                    voiced_frames<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
                ring_buffer<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment"># We&#39;re in the TRIGGERED state, so collect the audio data</span>
            <span class="token comment"># and add it to the ring buffer.</span>
            voiced_frames<span class="token punctuation">.</span>append<span class="token punctuation">(</span>frame<span class="token punctuation">)</span>
            ring_buffer<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> is_speech<span class="token punctuation">)</span><span class="token punctuation">)</span>
            num_unvoiced <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f <span class="token keyword">for</span> f<span class="token punctuation">,</span> speech <span class="token keyword">in</span> ring_buffer <span class="token keyword">if</span> <span class="token keyword">not</span> speech<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token comment"># If more than 90% of the frames in the ring buffer are</span>
            <span class="token comment"># unvoiced, then enter NOTTRIGGERED and yield whatever</span>
            <span class="token comment"># audio we&#39;ve collected.</span>
            <span class="token keyword">if</span> num_unvoiced <span class="token operator">&gt;</span> <span class="token number">0.9</span> <span class="token operator">*</span> ring_buffer<span class="token punctuation">.</span>maxlen<span class="token punctuation">:</span>
                triggered <span class="token operator">=</span> <span class="token boolean">False</span>
                <span class="token keyword">yield</span> <span class="token string">b&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">.</span><span class="token builtin">bytes</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> voiced_frames<span class="token punctuation">]</span><span class="token punctuation">)</span>
                ring_buffer<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
                voiced_frames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> triggered<span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token comment"># If we have any leftover voiced audio when we run out of input,</span>
    <span class="token comment"># yield it.</span>
    <span class="token keyword">if</span> voiced_frames<span class="token punctuation">:</span>
        <span class="token keyword">yield</span> <span class="token string">b&#39;&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">.</span><span class="token builtin">bytes</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> voiced_frames<span class="token punctuation">]</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transcribe-speech-to-text" tabindex="-1"><a class="header-anchor" href="#transcribe-speech-to-text" aria-hidden="true">#</a> Transcribe Speech to Text</h3><p><code>wav_transcriber.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> glob
<span class="token keyword">import</span> webrtcvad
<span class="token keyword">import</span> logging
<span class="token keyword">import</span> wav_handler
<span class="token keyword">from</span> deepspeech <span class="token keyword">import</span> Model
<span class="token keyword">from</span> timeit <span class="token keyword">import</span> default_timer <span class="token keyword">as</span> timer

<span class="token comment"># Pick Which DeepSpeech Model to Use</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
Load the pre-trained model into the memory
@param models: Output Graph Protocol Buffer file
@param scorer: Scorer file
@Retval
Returns a DeepSpeech Object
&#39;&#39;&#39;</span>
<span class="token keyword">def</span> <span class="token function">load_model</span><span class="token punctuation">(</span>models<span class="token punctuation">,</span> scorer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    to load up the model and scorer for DeepSpeech to run speech to text with. This function takes two parameters, the models graph, which we create a function to produce below, and the path to the scorer file. All it does is load the model from the graph and enable the use of the scorer. This function returns a DeepSpeech object.
    &#39;&#39;&#39;</span>
    ds <span class="token operator">=</span> Model<span class="token punctuation">(</span>models<span class="token punctuation">)</span>
    ds<span class="token punctuation">.</span>enableExternalScorer<span class="token punctuation">(</span>scorer<span class="token punctuation">)</span>
    <span class="token keyword">return</span> ds

<span class="token comment"># Speech to Text on an Audio File with DeepSpeech</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
Run Inference on input audio file
@param ds: Deepspeech object
@param audio: Input audio for running inference on
@param fs: Sample rate of the input audio file
@Retval:
Returns a list [Inference, Inference Time, Audio Length]
&#39;&#39;&#39;</span>
<span class="token keyword">def</span> <span class="token function">stt</span><span class="token punctuation">(</span>ds<span class="token punctuation">,</span> audio<span class="token punctuation">,</span> fs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    This function is the one that does the actual speech recognition. It takes three inputs, a DeepSpeech model, the audio data, and the sample rate.
    
    We begin by setting the time to 0 and calculating the length of the audio. All we really have to do is call the DeepSpeech model’s stt function to do our own stt function. We pass the audio file to the stt function and return the output.
    &#39;&#39;&#39;</span>
    inference_time <span class="token operator">=</span> <span class="token number">0.0</span>
    audio_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>audio<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> fs<span class="token punctuation">)</span>
    <span class="token comment"># Run Deepspeech</span>
    output <span class="token operator">=</span> ds<span class="token punctuation">.</span>stt<span class="token punctuation">(</span>audio<span class="token punctuation">)</span>
    <span class="token keyword">return</span> output

<span class="token comment"># DeepSpeech Model Graph Creator Function</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
Resolve directory path for the models and fetch each of them.
@param dirName: Path to the directory containing pre-trained models
@Retval:
Retunns a tuple containing each of the model files (pb, scorer)
&#39;&#39;&#39;</span>
<span class="token keyword">def</span> <span class="token function">resolve_models</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    This is the function that creates the model graph for the load_model function we created a couple sections above. This function takes the path to a directory. From that directory, it looks for files with the DeepSpeech model extension, pbmm and the DeepSpeech scorer file extension, .scorer. Then, it returns both of those values.
    &#39;&#39;&#39;</span>
    pb <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dirName <span class="token operator">+</span> <span class="token string">&quot;/*.pbmm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&quot;Found Model: %s&quot;</span> <span class="token operator">%</span> pb<span class="token punctuation">)</span>
    scorer <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dirName <span class="token operator">+</span> <span class="token string">&quot;/*.scorer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&quot;Found scorer: %s&quot;</span> <span class="token operator">%</span> scorer<span class="token punctuation">)</span>
    <span class="token keyword">return</span> pb<span class="token punctuation">,</span> scorer


<span class="token comment"># Voice Activation Detection to Create Segments for Speech to Text</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
Generate VAD segments. Filters out non-voiced audio frames.
@param waveFile: Input wav file to run VAD on.0
@Retval:
Returns tuple of
   segments: a bytearray of multiple smaller audio frames
             (The longer audio split into mutiple smaller one&#39;s)
   sample_rate: Sample rate of the input audio file
   audio_length: Duraton of the input audio file
&#39;&#39;&#39;</span>
<span class="token keyword">def</span> <span class="token function">vad_segment_generator</span><span class="token punctuation">(</span>wavFile<span class="token punctuation">,</span> aggressiveness<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;
    The last function in our WAV transcription file generates segments of text that contain voice. We use the WAV handler file we created earlier and webrtcvad to do the heavy lifting. This function requires two parameters: a WAV file and an integer value from 0 to 3 representing how aggressively we want to filter out non-voice activity.
    
    We call the read_wave function from the wav_handler.py file we created earlier and imported above to get the audio data, sample rate, and audio length. We then assert that the sample rate is 16kHz before moving on to create a VAD object. Next, we call the frame generator from wav_handler.
    
    We convert the generated iterator to a list which we pass to the vad_collector function from wav_handler along with the sample rate, frame duration (30 ms), padding duration (300 ms), and VAD object. Finally, we return the collected VAD segments along with the sample rate and audio length.
    &#39;&#39;&#39;</span>
    audio<span class="token punctuation">,</span> sample_rate<span class="token punctuation">,</span> audio_length <span class="token operator">=</span> wav_handler<span class="token punctuation">.</span>read_wave<span class="token punctuation">(</span>wavFile<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> sample_rate <span class="token operator">==</span> <span class="token number">16000</span><span class="token punctuation">,</span> <span class="token string">&quot;Only 16000Hz input WAV files are supported for now!&quot;</span>
    vad <span class="token operator">=</span> webrtcvad<span class="token punctuation">.</span>Vad<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>aggressiveness<span class="token punctuation">)</span><span class="token punctuation">)</span>
    frames <span class="token operator">=</span> wav_handler<span class="token punctuation">.</span>frame_generator<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> audio<span class="token punctuation">,</span> sample_rate<span class="token punctuation">)</span>
    frames <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>frames<span class="token punctuation">)</span>
    segments <span class="token operator">=</span> wav_handler<span class="token punctuation">.</span>vad_collector<span class="token punctuation">(</span>sample_rate<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> vad<span class="token punctuation">,</span> frames<span class="token punctuation">)</span>
    <span class="token keyword">return</span> segments<span class="token punctuation">,</span> sample_rate<span class="token punctuation">,</span> audio_length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reading-arguments-for-deepspeech-speech-to-text" tabindex="-1"><a class="header-anchor" href="#reading-arguments-for-deepspeech-speech-to-text" aria-hidden="true">#</a> Reading Arguments for DeepSpeech Speech to Text</h3><p>We create a main function that takes one parameter — <code>args</code>. These are the arguments passed in through the command line. We use the <code>argparse</code> library to parse the arguments sent in. We also create helpful tips on how to use each one.</p><p>We use <code>aggressive</code> to determine how aggressively we want to filter. audio directs us to the audio file path. model points us to the directory containing the model and scorer. Finally, stream dictates whether or not we are streaming audio. Neither stream nor audio is required, but one or the other must be present.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">import</span> os
<span class="token keyword">import</span> logging
<span class="token keyword">import</span> argparse
<span class="token keyword">import</span> subprocess
<span class="token keyword">import</span> shlex
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> wav_transcriber
<span class="token comment"># Debug helpers</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>stream<span class="token operator">=</span>sys<span class="token punctuation">.</span>stderr<span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">&#39;Transcribe long audio files using webRTC VAD or use the streaming interface&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--aggressive&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> choices<span class="token operator">=</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
                       <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;Determines how aggressive filtering out non-speech is. (Interger between 0-3)&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--audio&#39;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
                       <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;Path to the audio file to run (WAV format)&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--model&#39;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                       <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;Path to directory that contains all model files (output_graph and scorer)&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--stream&#39;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;store_true&#39;</span><span class="token punctuation">,</span>
                       <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;To use deepspeech streaming interface&#39;</span><span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> args<span class="token punctuation">.</span>stream <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Opening mic for streaming&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>audio <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&quot;Transcribing audio file @ %s&quot;</span> <span class="token operator">%</span> args<span class="token punctuation">.</span>audio<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        parser<span class="token punctuation">.</span>print_help<span class="token punctuation">(</span><span class="token punctuation">)</span>
        parser<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-deepspeech-for-real-time-or-asynchronous-speech-recognition" tabindex="-1"><a class="header-anchor" href="#using-deepspeech-for-real-time-or-asynchronous-speech-recognition" aria-hidden="true">#</a> Using DeepSpeech for Real Time or Asynchronous Speech Recognition</h3><p>This is still inside the main function we started above. Once we parse all the arguments, we load up DeepSpeech. First, we get the directory containing the models. Next, we call the <code>wav_transcriber</code> to resolve and load the models.</p><p>If we pass the path to an audio data file in the command line, then we will run asynchronous speech recognition. The first thing we do for that is call the VAD segment generator to generate the VAD segments and get the sample rate and audio length. Next, we open up a text file to transcribe to.</p><p>For each of the enumerated segments, we will process each chunk by using <code>numpy</code> to pull the segment from the buffer and the speech to text function from <code>wav_transcriber</code> to do the speech to text functionality. We write to the text file until we run out of audio segments.</p><p>If we pass stream instead of audio, then we open up the mic to stream audio data in. If you don’t need real time automatic speech recognition, then you can ignore this part. First, we have to spin up a subprocess to open up a mic to stream in real time just like we did with PyTorch local speech recognition.</p><p>We use the <code>subprocess</code> and <code>shlex</code> libraries to open the mic to stream voice audio until we shut it down. The model will read 512 bytes of audio data at a time and transcribe it.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Point to a path containing the pre-trained models &amp; resolve ~ if used</span>
dirName <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span>args<span class="token punctuation">.</span>model<span class="token punctuation">)</span>
<span class="token comment"># Resolve all the paths of model files</span>
output_graph<span class="token punctuation">,</span> scorer <span class="token operator">=</span> wav_transcriber<span class="token punctuation">.</span>resolve_models<span class="token punctuation">(</span>dirName<span class="token punctuation">)</span>
<span class="token comment"># Load output_graph, alpahbet and scorer</span>
model_retval <span class="token operator">=</span> wav_transcriber<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span>output_graph<span class="token punctuation">,</span> scorer<span class="token punctuation">)</span>
<span class="token keyword">if</span> args<span class="token punctuation">.</span>audio <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># Run VAD on the input file</span>
    waveFile <span class="token operator">=</span> args<span class="token punctuation">.</span>audio
    segments<span class="token punctuation">,</span> sample_rate<span class="token punctuation">,</span> audio_length <span class="token operator">=</span> wav_transcriber<span class="token punctuation">.</span>vad_segment_generator<span class="token punctuation">(</span>waveFile<span class="token punctuation">,</span> args<span class="token punctuation">.</span>aggressive<span class="token punctuation">)</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>waveFile<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&quot;.wav&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span>
    logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&quot;Saving Transcript @: %s&quot;</span> <span class="token operator">%</span> waveFile<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&quot;.wav&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.txt&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> segment <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>segments<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Run deepspeech on the chunk that just completed VAD</span>
        logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&quot;Processing chunk %002d&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        audio <span class="token operator">=</span> np<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>segment<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int16<span class="token punctuation">)</span>
        output <span class="token operator">=</span> wav_transcriber<span class="token punctuation">.</span>stt<span class="token punctuation">(</span>model_retval<span class="token punctuation">,</span> audio<span class="token punctuation">,</span> sample_rate<span class="token punctuation">)</span>
        logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&quot;Transcript: %s&quot;</span> <span class="token operator">%</span> output<span class="token punctuation">)</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>output <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># Summary of the files processed</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    sctx <span class="token operator">=</span> model_retval<span class="token punctuation">.</span>createStream<span class="token punctuation">(</span><span class="token punctuation">)</span>
    subproc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>shlex<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;rec -q -V0 -e signed -L -c 1 -b 16 -r 16k -t raw - gain -2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>
                                bufsize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;You can start speaking now. Press Control-C to stop recording.&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            data <span class="token operator">=</span> subproc<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>
            sctx<span class="token punctuation">.</span>feedAudioContent<span class="token punctuation">(</span>np<span class="token punctuation">.</span>frombuffer<span class="token punctuation">(</span>data<span class="token punctuation">,</span> np<span class="token punctuation">.</span>int16<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Transcription: &#39;</span><span class="token punctuation">,</span> sctx<span class="token punctuation">.</span>finishStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        subproc<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>
        subproc<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resource" tabindex="-1"><a class="header-anchor" href="#resource" aria-hidden="true">#</a> Resource</h2>`,25),k={href:"https://medium.com/plain-simple-software/a-guide-to-deepspeech-speech-to-text-b4b051477cfa",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const a=p("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[s("DeepSpeech is an open source Python library that enables us to build automatic speech ecognition systems. It is based on Baidu’s 2014 paper titled "),n("a",r,[s("Deep Speech: Scaling up end-to-end speech recognition"),e(a)]),s(".")]),d,n("p",null,[n("a",k,[s("A Guide to DeepSpeech Speech to Text"),e(a)])])])}const g=t(l,[["render",m],["__file","DeepSpeech2Text.html.vue"]]);export{g as default};
