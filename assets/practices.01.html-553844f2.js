import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as d,c as k,b as n,d as a,e as o,w as s,f as c}from"./app-be058d70.js";const m="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part1_1.png",v="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part1_2.jpg",b="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part1_3.jpg",h="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part1_4.jpg",g="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part1_5.jpg",f="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part1_6.jpg",y="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part1_7.jpg",_="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part2_1.jpg",q="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part2_2.jpg",w="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part2_3.jpg",x="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part3_1.jpg",A="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part3_2.jpg",P="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part3_3.jpg",C="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part3_4.jpg",T="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part3_5.jpg",R="/data/unisa/AdvancedAnalytic2/prac1/Prac1_Part3_6.jpg",S="/data/unisa/AdvancedAnalytic2/prac2/result.jpg",E="/data/unisa/AdvancedAnalytic2/prac5/pcselect_ret.png",D="/data/unisa/AdvancedAnalytic2/prac5/hiton.pc.ret.png",I="/data/unisa/AdvancedAnalytic2/prac5/dag.png",B={},G=c('<h2 id="week-2-naive-bayes-practical-1" tabindex="-1"><a class="header-anchor" href="#week-2-naive-bayes-practical-1" aria-hidden="true">#</a> Week 2: Naive Bayes (Practical 1)</h2><h3 id="part1-training" tabindex="-1"><a class="header-anchor" href="#part1-training" aria-hidden="true">#</a> Part1 : Training</h3><details class="hint-container details"><summary>Steps of using Weka</summary><h4 id="step1-explorer" tabindex="-1"><a class="header-anchor" href="#step1-explorer" aria-hidden="true">#</a> Step1: Explorer</h4><figure><img src="'+m+'" alt="Click Explorer" tabindex="0" loading="lazy"><figcaption>Click Explorer</figcaption></figure><h4 id="step2-select-data" tabindex="-1"><a class="header-anchor" href="#step2-select-data" aria-hidden="true">#</a> Step2: Select data</h4><p><img src="'+v+'" alt="Open Files" loading="lazy"><br><img src="'+b+'" alt="Open Files" loading="lazy"></p><h4 id="step3-choose-algorithm" tabindex="-1"><a class="header-anchor" href="#step3-choose-algorithm" aria-hidden="true">#</a> Step3: Choose Algorithm</h4><p><img src="'+h+'" alt="Choose Algorithm" loading="lazy"><br><img src="'+g+'" alt="Choose Algorithm" loading="lazy"></p><h4 id="step3-start-and-result" tabindex="-1"><a class="header-anchor" href="#step3-start-and-result" aria-hidden="true">#</a> Step3: Start and Result</h4><p><img src="'+f+'" alt="Test Option" loading="lazy"><br><img src="'+y+'" alt="Start and Result" loading="lazy"></p></details><h3 id="part2-test" tabindex="-1"><a class="header-anchor" href="#part2-test" aria-hidden="true">#</a> Part2 : Test</h3><details class="hint-container details"><summary>Test Naive Bayes Model</summary><h4 id="step1-create-test-data" tabindex="-1"><a class="header-anchor" href="#step1-create-test-data" aria-hidden="true">#</a> Step1: Create Test Data</h4><figure><img src="'+_+'" alt="Click Explorer" tabindex="0" loading="lazy"><figcaption>Click Explorer</figcaption></figure><h4 id="step2-select-test-data" tabindex="-1"><a class="header-anchor" href="#step2-select-test-data" aria-hidden="true">#</a> Step2: Select Test data</h4><figure><img src="'+q+'" alt="Click Explorer" tabindex="0" loading="lazy"><figcaption>Click Explorer</figcaption></figure><h4 id="step3-result" tabindex="-1"><a class="header-anchor" href="#step3-result" aria-hidden="true">#</a> Step3: Result</h4><figure><img src="'+w+'" alt="Click Explorer" tabindex="0" loading="lazy"><figcaption>Click Explorer</figcaption></figure></details><h3 id="part3-naive-bayes-using-numerical-dataset" tabindex="-1"><a class="header-anchor" href="#part3-naive-bayes-using-numerical-dataset" aria-hidden="true">#</a> Part3 : Naive Bayes using Numerical Dataset</h3><details class="hint-container details"><summary>Steps for Numerical Dataset</summary><h4 id="step1-select-numerical-data" tabindex="-1"><a class="header-anchor" href="#step1-select-numerical-data" aria-hidden="true">#</a> Step1: Select Numerical Data</h4><p><img src="'+x+'" alt="Numerical Data" loading="lazy"><br><img src="'+A+'" alt="Click Explorer" loading="lazy"></p><h4 id="step2-training-and-testing" tabindex="-1"><a class="header-anchor" href="#step2-training-and-testing" aria-hidden="true">#</a> Step2: Training and Testing</h4><figure><img src="'+P+'" alt="Click Explorer" tabindex="0" loading="lazy"><figcaption>Click Explorer</figcaption></figure><h4 id="step3-discretize" tabindex="-1"><a class="header-anchor" href="#step3-discretize" aria-hidden="true">#</a> Step3: Discretize</h4><p><img src="'+C+'" alt="Click Explorer" loading="lazy"><br><img src="'+T+'" alt="Click Explorer" loading="lazy"></p><h4 id="step4-retraing-compare-the-different-with-step-2" tabindex="-1"><a class="header-anchor" href="#step4-retraing-compare-the-different-with-step-2" aria-hidden="true">#</a> Step4: Retraing (Compare the different with Step 2)</h4><figure><img src="'+R+`" alt="Click Explorer" tabindex="0" loading="lazy"><figcaption>Click Explorer</figcaption></figure><div class="hint-container info"><p class="hint-container-title">My observation</p><p>The performance increase after discretizing.</p></div></details><h2 id="week-3-bayesian-network-inference-practical-2" tabindex="-1"><a class="header-anchor" href="#week-3-bayesian-network-inference-practical-2" aria-hidden="true">#</a> Week 3: Bayesian Network Inference (Practical 2)</h2><h3 id="install-package" tabindex="-1"><a class="header-anchor" href="#install-package" aria-hidden="true">#</a> Install package</h3><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>requireNamespace<span class="token punctuation">(</span><span class="token string">&quot;BiocManager&quot;</span><span class="token punctuation">,</span> quietly <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    install.packages<span class="token punctuation">(</span><span class="token string">&quot;BiocManager&quot;</span><span class="token punctuation">)</span>
BiocManager<span class="token operator">::</span>install<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token string">&quot;graph&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;RBGL&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Rgraphviz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

install.packages<span class="token punctuation">(</span><span class="token string">&#39;gRain&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> dependencies<span class="token operator">=</span><span class="token boolean">TRUE</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="create-the-conditional-probability-table-for-the-asia-network" tabindex="-1"><a class="header-anchor" href="#create-the-conditional-probability-table-for-the-asia-network" aria-hidden="true">#</a> Create the conditional probability table for the Asia network</h3><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>library<span class="token punctuation">(</span>gRain<span class="token punctuation">)</span>

yn <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token string">&quot;yes&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span>

a <span class="token operator">&lt;-</span> cptable<span class="token punctuation">(</span><span class="token operator">~</span>asia<span class="token punctuation">,</span> values<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span>levels<span class="token operator">=</span>yn<span class="token punctuation">)</span>
t.a <span class="token operator">&lt;-</span> cptable<span class="token punctuation">(</span><span class="token operator">~</span>tub<span class="token operator">|</span>asia<span class="token punctuation">,</span> values<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span>levels<span class="token operator">=</span>yn<span class="token punctuation">)</span>
s <span class="token operator">&lt;-</span> cptable<span class="token punctuation">(</span><span class="token operator">~</span>smoke<span class="token punctuation">,</span> values<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> levels<span class="token operator">=</span>yn<span class="token punctuation">)</span>
l.s <span class="token operator">&lt;-</span> cptable<span class="token punctuation">(</span><span class="token operator">~</span>lung<span class="token operator">|</span>smoke<span class="token punctuation">,</span> values<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span> levels<span class="token operator">=</span>yn<span class="token punctuation">)</span>
b.s <span class="token operator">&lt;-</span> cptable<span class="token punctuation">(</span><span class="token operator">~</span>bronc<span class="token operator">|</span>smoke<span class="token punctuation">,</span> values<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> levels<span class="token operator">=</span>yn<span class="token punctuation">)</span>
e.lt <span class="token operator">&lt;-</span>
cptable<span class="token punctuation">(</span><span class="token operator">~</span>either<span class="token operator">|</span>lung<span class="token operator">:</span>tub<span class="token punctuation">,</span>values<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>levels<span class="token operator">=</span>yn<span class="token punctuation">)</span>
x.e <span class="token operator">&lt;-</span> cptable<span class="token punctuation">(</span><span class="token operator">~</span>xray<span class="token operator">|</span>either<span class="token punctuation">,</span> values<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span> levels<span class="token operator">=</span>yn<span class="token punctuation">)</span>
d.be <span class="token operator">&lt;-</span> cptable<span class="token punctuation">(</span><span class="token operator">~</span>dysp<span class="token operator">|</span>bronc<span class="token operator">:</span>either<span class="token punctuation">,</span> values<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
levels<span class="token operator">=</span>yn<span class="token punctuation">)</span>
plist <span class="token operator">&lt;-</span> compileCPT<span class="token punctuation">(</span>list<span class="token punctuation">(</span>a<span class="token punctuation">,</span> t.a<span class="token punctuation">,</span> s<span class="token punctuation">,</span> l.s<span class="token punctuation">,</span> b.s<span class="token punctuation">,</span> e.lt<span class="token punctuation">,</span> x.e<span class="token punctuation">,</span> d.be<span class="token punctuation">)</span><span class="token punctuation">)</span>
plist
<span class="token comment">#Checking the (conditional) probability of some nodes</span>
plist<span class="token operator">$</span>tub
plist<span class="token operator">$</span>either
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="draw-the-network" tabindex="-1"><a class="header-anchor" href="#draw-the-network" aria-hidden="true">#</a> Draw the network</h3><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>net1<span class="token operator">=</span>grain<span class="token punctuation">(</span>plist<span class="token punctuation">)</span> 
plot<span class="token punctuation">(</span>net1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="convert-data-into-table" tabindex="-1"><a class="header-anchor" href="#convert-data-into-table" aria-hidden="true">#</a> Convert data into table</h3><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>plist<span class="token operator">$</span>tub <span class="token percent-operator operator">%&gt;%</span> as.data.frame.table
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="query-the-marginal-probabilities-p-lung-and-p-bronc" tabindex="-1"><a class="header-anchor" href="#query-the-marginal-probabilities-p-lung-and-p-bronc" aria-hidden="true">#</a> Query the marginal probabilities P(lung) and P(bronc):</h3><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>querygrain<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> nodes<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">&quot;lung&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bronc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&quot;marginal&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="query-the-joint-probability-p-lung-bronc" tabindex="-1"><a class="header-anchor" href="#query-the-joint-probability-p-lung-bronc" aria-hidden="true">#</a> Query the joint probability P(lung, bronc):</h3><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>querygrain<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> nodes<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">&quot;lung&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bronc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&quot;joint&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="query-the-conditional-probability-p-lung-bronc" tabindex="-1"><a class="header-anchor" href="#query-the-conditional-probability-p-lung-bronc" aria-hidden="true">#</a> Query the conditional probability P(lung|bronc)</h3><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>querygrain<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> nodes<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">&quot;lung&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bronc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&quot;conditional&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="result" tabindex="-1"><a class="header-anchor" href="#result" aria-hidden="true">#</a> Result</h3><figure><img src="`+S+`" alt="result" tabindex="0" loading="lazy"><figcaption>result</figcaption></figure><h3 id="more-quesitons" tabindex="-1"><a class="header-anchor" href="#more-quesitons" aria-hidden="true">#</a> More quesitons</h3><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>
querygrain<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> nodes<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">&quot;bronc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&quot;marginal&quot;</span><span class="token punctuation">)</span>
querygrain<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> nodes<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">&quot;bronc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&quot;conditional&quot;</span><span class="token punctuation">)</span>

querygrain<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> nodes<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">&quot;lung&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bronc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&quot;joint&quot;</span><span class="token punctuation">)</span>
querygrain<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> nodes<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">&quot;lung&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;smoke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&quot;conditional&quot;</span><span class="token punctuation">)</span>
querygrain<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> nodes<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">&quot;xray&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;smoke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&quot;conditional&quot;</span><span class="token punctuation">)</span>
querygrain<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> nodes<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">&quot;xray&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;smoke&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;asia&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&quot;conditional&quot;</span><span class="token punctuation">)</span>

querygrain<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> nodes<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">&quot;lung&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;asia&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&quot;conditional&quot;</span><span class="token punctuation">)</span>
querygrain<span class="token punctuation">(</span>net1<span class="token punctuation">,</span> nodes<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">&quot;bronc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;smoke&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">&quot;conditional&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Calculate the following probabilities:</p><ul><li>P(lung=yes,bronc=yes) : 0.07</li><li>P(bronc=yes) :0.45</li><li>P(lung=yes|smoke=yes) : 0.1</li><li>P(xray=yes|smoke=yes) : 0.1517048</li><li>P(xray=yes|smoke=yes, asia=yes)</li><li>P(lung=yes|asia=yes) : 0.055</li><li>P(bronc=yes|smoke=yes, asia=yes) : 0.6</li></ul><h2 id="week-4-learning-bayesian-network-structure-from-data-practical-3" tabindex="-1"><a class="header-anchor" href="#week-4-learning-bayesian-network-structure-from-data-practical-3" aria-hidden="true">#</a> Week 4: Learning Bayesian network structure from data (Practical 3)</h2>`,29),N=n("span",{style:{color:"orange"}},"PC algorithm",-1),z=n("span",{style:{color:"orange"}},"Bayesian network structure",-1),L={href:"https://cran.r-project.org/web/packages/pcalg/pcalg.pdf",target:"_blank",rel:"noopener noreferrer"},F=n("div",{class:"language-r line-numbers-mode","data-ext":"r"},[n("pre",{class:"language-r"},[n("code",null,[a("library"),n("span",{class:"token punctuation"},"("),a("pcalg"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"## Load predefined data"),a(`
data`),n("span",{class:"token punctuation"},"("),a("gmG"),n("span",{class:"token punctuation"},")"),a(`
gmG8`),n("span",{class:"token operator"},"$"),a("x"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"]"),a(`
n `),n("span",{class:"token operator"},"<-"),a(" nrow "),n("span",{class:"token punctuation"},"("),a("gmG8"),n("span",{class:"token operator"},"$"),a(" x"),n("span",{class:"token punctuation"},")"),a(`
V `),n("span",{class:"token operator"},"<-"),a(" colnames"),n("span",{class:"token punctuation"},"("),a("gmG8"),n("span",{class:"token operator"},"$"),a(" x"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"# labels aka node names"),a(`
`),n("span",{class:"token comment"},"## estimate CPDAG"),a(`
pc.fit `),n("span",{class:"token operator"},"<-"),a(" pc"),n("span",{class:"token punctuation"},"("),a("suffStat "),n("span",{class:"token operator"},"="),a(" list"),n("span",{class:"token punctuation"},"("),a("C "),n("span",{class:"token operator"},"="),a(" cor"),n("span",{class:"token punctuation"},"("),a("gmG8"),n("span",{class:"token operator"},"$"),a("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(" n "),n("span",{class:"token operator"},"="),a(" n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
indepTest `),n("span",{class:"token operator"},"="),a(" gaussCItest"),n("span",{class:"token punctuation"},","),a(" alpha"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0.01"),n("span",{class:"token punctuation"},","),a(" labels "),n("span",{class:"token operator"},"="),a(" V"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("require"),n("span",{class:"token punctuation"},"("),a("Rgraphviz"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"## show estimated graph"),a(`
    par`),n("span",{class:"token punctuation"},"("),a("mfrow"),n("span",{class:"token operator"},"="),a("c"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
    plot`),n("span",{class:"token punctuation"},"("),a("pc.fit"),n("span",{class:"token punctuation"},","),a(" main "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"Estimated graph"'),n("span",{class:"token punctuation"},")"),a(`
    plot`),n("span",{class:"token punctuation"},"("),a("gmG8"),n("span",{class:"token operator"},"$"),a("g"),n("span",{class:"token punctuation"},","),a(" main "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"True DAG"'),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("div",{class:"language-r line-numbers-mode","data-ext":"r"},[n("pre",{class:"language-r"},[n("code",null,[n("span",{class:"token comment"},"## Load data"),a(`
data`),n("span",{class:"token punctuation"},"("),a("gmD"),n("span",{class:"token punctuation"},")"),a(`
gmD`),n("span",{class:"token operator"},"$"),a("x"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"]"),a(`
V `),n("span",{class:"token operator"},"<-"),a(" colnames"),n("span",{class:"token punctuation"},"("),a("gmD"),n("span",{class:"token operator"},"$"),a("x"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"## define sufficient statistics"),a(`
suffStat `),n("span",{class:"token operator"},"<-"),a(" list"),n("span",{class:"token punctuation"},"("),a("dm "),n("span",{class:"token operator"},"="),a(" gmD"),n("span",{class:"token operator"},"$"),a("x"),n("span",{class:"token punctuation"},","),a(" nlev "),n("span",{class:"token operator"},"="),a(" c"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(" adaptDF "),n("span",{class:"token operator"},"="),a(`
`),n("span",{class:"token boolean"},"FALSE"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"## estimate the structure"),a(`
pc.D `),n("span",{class:"token operator"},"<-"),a(" pc"),n("span",{class:"token punctuation"},"("),a("suffStat"),n("span",{class:"token punctuation"},","),a(" indepTest "),n("span",{class:"token operator"},"="),a(" disCItest"),n("span",{class:"token punctuation"},","),a(" alpha "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"0.01"),n("span",{class:"token punctuation"},","),a(`
labels `),n("span",{class:"token operator"},"="),a(" V"),n("span",{class:"token punctuation"},","),a(" verbose "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token boolean"},"TRUE"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"#compare the graphs"),a(`
`),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("require"),n("span",{class:"token punctuation"},"("),a("Rgraphviz"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"## show estimated CPDAG"),a(`
    par`),n("span",{class:"token punctuation"},"("),a("mfrow "),n("span",{class:"token operator"},"="),a(" c"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
    plot`),n("span",{class:"token punctuation"},"("),a("pc.D"),n("span",{class:"token punctuation"},","),a(" main "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"Estimated graph"'),n("span",{class:"token punctuation"},")"),a(`
    plot`),n("span",{class:"token punctuation"},"("),a("gmD"),n("span",{class:"token operator"},"$"),a("g"),n("span",{class:"token punctuation"},","),a(" main "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"True DAG"'),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-R line-numbers-mode","data-ext":"R"},[n("pre",{class:"language-R"},[n("code",null,`## Load binary data
data(gmB)
gmB$x[1:5,]
V <- colnames(gmB$x)
## estimate the structure
pc.B <- pc(suffStat = list(dm = gmB$x, adaptDF = FALSE),
indepTest = binCItest, alpha = 0.01, labels = V, verbose =
TRUE)
pc.B
if (require(Rgraphviz)) {
    ## show estimated CPDAG
    plot(pc.B, main = "Estimated CPDAG")
    plot(gmB$g, main = "True DAG")
}
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=n("h2",{id:"week-5-r-and-data-mining-practical",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#week-5-r-and-data-mining-practical","aria-hidden":"true"},"#"),a(" Week 5: R and data mining (Practical)")],-1),M={href:"http://www.rdatamining.com/",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,"Building a decision tree and visualise it",-1),$=n("div",{class:"language-r line-numbers-mode","data-ext":"r"},[n("pre",{class:"language-r"},[n("code",null,[a("library"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"party"'),n("span",{class:"token punctuation"},")"),a(`
str`),n("span",{class:"token punctuation"},"("),a("iris"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"# Call function ctree to build a decision tree."),a(`
`),n("span",{class:"token comment"},"# The first parameter is a formula, which defines a target"),a(`
`),n("span",{class:"token comment"},"# variable and a list of independent variables."),a(`
iris_ctree `),n("span",{class:"token operator"},"<-"),a(`
    ctree`),n("span",{class:"token punctuation"},"("),a("Species "),n("span",{class:"token operator"},"~"),a(" Sepal.Length "),n("span",{class:"token operator"},"+"),a(" Sepal.Width "),n("span",{class:"token operator"},"+"),a(" Petal.Length "),n("span",{class:"token operator"},"+"),a(" Petal.Width"),n("span",{class:"token punctuation"},","),a(" data"),n("span",{class:"token operator"},"="),a("iris"),n("span",{class:"token punctuation"},")"),a(`
print`),n("span",{class:"token punctuation"},"("),a("iris_ctree"),n("span",{class:"token punctuation"},")"),a(`
plot`),n("span",{class:"token punctuation"},"("),a("iris_ctree"),n("span",{class:"token punctuation"},")"),a(`
plot`),n("span",{class:"token punctuation"},"("),a("iris_ctree"),n("span",{class:"token punctuation"},","),a(" type"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"simple"'),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("p",null,"Draw a sample of 40 records from iris data, and remove variable Species",-1),W=n("div",{class:"language-r line-numbers-mode","data-ext":"r"},[n("pre",{class:"language-r"},[n("code",null,[a("idx "),n("span",{class:"token operator"},"<-"),a(" sample"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),a("dim"),n("span",{class:"token punctuation"},"("),a("iris"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"40"),n("span",{class:"token punctuation"},")"),a(`
irisSample `),n("span",{class:"token operator"},"<-"),a(" iris"),n("span",{class:"token punctuation"},"["),a("idx"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"]"),a(`
irisSample`),n("span",{class:"token operator"},"$"),a("Species "),n("span",{class:"token operator"},"<-"),a(),n("span",{class:"token keyword"},"NULL"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),X=n("p",null,"Perform hierarchical clustering",-1),Q=n("div",{class:"language-r line-numbers-mode","data-ext":"r"},[n("pre",{class:"language-r"},[n("code",null,[a("hc "),n("span",{class:"token operator"},"<-"),a(" hclust"),n("span",{class:"token punctuation"},"("),a("dist"),n("span",{class:"token punctuation"},"("),a("irisSample"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(" method"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"ave"'),n("span",{class:"token punctuation"},")"),a(`
plot`),n("span",{class:"token punctuation"},"("),a("hc"),n("span",{class:"token punctuation"},","),a(" hang "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),a(" labels"),n("span",{class:"token operator"},"="),a("iris"),n("span",{class:"token operator"},"$"),a("Species"),n("span",{class:"token punctuation"},"["),a("idx"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Z={href:"https://www.researchgate.net/publication/221214719_LOF_Identifying_Density%E2%80%90Based_Local_Outliers",target:"_blank",rel:"noopener noreferrer"},Y=n("div",{class:"language-r line-numbers-mode","data-ext":"r"},[n("pre",{class:"language-r"},[n("code",null,[a("library"),n("span",{class:"token punctuation"},"("),a("DMwR2"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},'# remove "Species", which is a categorical column'),a(`
iris2 `),n("span",{class:"token operator"},"<-"),a(" iris"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),a(`
outlier.scores `),n("span",{class:"token operator"},"<-"),a(" lofactor"),n("span",{class:"token punctuation"},"("),a("iris2"),n("span",{class:"token punctuation"},","),a(" k"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},")"),a(`
plot`),n("span",{class:"token punctuation"},"("),a("density"),n("span",{class:"token punctuation"},"("),a("outlier.scores"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"# pick top 5 as outliers"),a(`
outliers `),n("span",{class:"token operator"},"<-"),a(" order"),n("span",{class:"token punctuation"},"("),a("outlier.scores"),n("span",{class:"token punctuation"},","),a(" decreasing"),n("span",{class:"token operator"},"="),a("T"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},"]"),a(`
`),n("span",{class:"token comment"},"# who are outliers"),a(`
print`),n("span",{class:"token punctuation"},"("),a("outliers"),n("span",{class:"token punctuation"},")"),a(`
print`),n("span",{class:"token punctuation"},"("),a("iris2"),n("span",{class:"token punctuation"},"["),a("outliers"),n("span",{class:"token punctuation"},","),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=n("p",null,"show outliers with a pairs plot as below, where outliers are labeled with “+” in red",-1),K=n("div",{class:"language-r line-numbers-mode","data-ext":"r"},[n("pre",{class:"language-r"},[n("code",null,[a("n "),n("span",{class:"token operator"},"<-"),a(" nrow"),n("span",{class:"token punctuation"},"("),a("iris2"),n("span",{class:"token punctuation"},")"),a(`
pch `),n("span",{class:"token operator"},"<-"),a(" rep"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"."'),n("span",{class:"token punctuation"},","),a(" n"),n("span",{class:"token punctuation"},")"),a(`
pch`),n("span",{class:"token punctuation"},"["),a("outliers"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"<-"),a(),n("span",{class:"token string"},'"+"'),a(`
col `),n("span",{class:"token operator"},"<-"),a(" rep"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"black"'),n("span",{class:"token punctuation"},","),a(" n"),n("span",{class:"token punctuation"},")"),a(`
col`),n("span",{class:"token punctuation"},"["),a("outliers"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"<-"),a(),n("span",{class:"token string"},'"red"'),a(`
pairs`),n("span",{class:"token punctuation"},"("),a("iris2"),n("span",{class:"token punctuation"},","),a(" pch"),n("span",{class:"token operator"},"="),a("pch"),n("span",{class:"token punctuation"},","),a(" col"),n("span",{class:"token operator"},"="),a("col"),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),nn=n("p",null,[a("This section includes association rule mining, pruning redundant rules, and visualising association rules."),n("br"),a(" Association rule mining")],-1),an=n("div",{class:"language-r line-numbers-mode","data-ext":"r"},[n("pre",{class:"language-r"},[n("code",null,[n("span",{class:"token comment"},"# Association Rule Mining:"),a(`
`),n("span",{class:"token comment"},"# Following examples use The Titanic dataset, a 4-dimensional table"),a(`
`),n("span",{class:"token comment"},"# with summarized information on the fate of passengers on the"),a(`
`),n("span",{class:"token comment"},"# Titanic according to social class, sex, age and survival"),a(`
`),n("span",{class:"token comment"},"# It can be found in https://www.rdatamining.com/datasets"),a(`
`),n("span",{class:"token comment"},"# get current script folder"),a(`
myPath `),n("span",{class:"token operator"},"<-"),a(" dirname"),n("span",{class:"token punctuation"},"("),a("rstudioapi"),n("span",{class:"token operator"},"::"),a("getSourceEditorContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"$"),a("path"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"#load dataset (assuming it is in script's folder)"),a(`
load`),n("span",{class:"token punctuation"},"("),a("paste0"),n("span",{class:"token punctuation"},"("),a("myPath"),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"/titanic.raw.rdata"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
str`),n("span",{class:"token punctuation"},"("),a("Titanic"),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),sn=n("p",null,[a("use APRIORI algorithm for association rule mining [Agrawal and Srikant, 1994]. package arules [Hahsler et al., 2014] implements it in "),n("code",null,"apriori()"),a(" function")],-1),tn=n("div",{class:"language-r line-numbers-mode","data-ext":"r"},[n("pre",{class:"language-r"},[n("code",null,[a("library"),n("span",{class:"token punctuation"},"("),a("arules"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"# find association rules with default settings"),a(`
rules `),n("span",{class:"token operator"},"<-"),a(" apriori"),n("span",{class:"token punctuation"},"("),a("titanic.raw"),n("span",{class:"token punctuation"},")"),a(`
inspect`),n("span",{class:"token punctuation"},"("),a("rules"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"## use code below if above code does not work"),a(`
arules`),n("span",{class:"token operator"},"::"),a("inspect"),n("span",{class:"token punctuation"},"("),a("rules"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},'# rules with rhs (right-hand side) containing "Survived" only'),a(`
rules `),n("span",{class:"token operator"},"<-"),a(" apriori"),n("span",{class:"token punctuation"},"("),a(`
    titanic.raw`),n("span",{class:"token punctuation"},","),a(" control "),n("span",{class:"token operator"},"="),a(" list"),n("span",{class:"token punctuation"},"("),a("verbose"),n("span",{class:"token operator"},"="),a("F"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token punctuation"},","),a("parameter "),n("span",{class:"token operator"},"="),a(" list"),n("span",{class:"token punctuation"},"("),a("minlen"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),a(" supp"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0.005"),n("span",{class:"token punctuation"},","),a(" conf"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0.8"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token punctuation"},","),a("appearance "),n("span",{class:"token operator"},"="),a(" list"),n("span",{class:"token punctuation"},"("),a("rhs"),n("span",{class:"token operator"},"="),a("c"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Survived=No"'),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},'"Survived=Yes"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token punctuation"},","),a("default"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"lhs"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
rules.sorted `),n("span",{class:"token operator"},"<-"),a(" sort"),n("span",{class:"token punctuation"},"("),a("rules"),n("span",{class:"token punctuation"},","),a(" by"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"lift"'),n("span",{class:"token punctuation"},")"),a(`
inspect`),n("span",{class:"token punctuation"},"("),a("rules.sorted"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"# Removing Redundancy, find redundant rules"),a(`
redundant `),n("span",{class:"token operator"},"<-"),a(" is.redundant"),n("span",{class:"token punctuation"},"("),a("rules.sorted"),n("span",{class:"token punctuation"},")"),a(`
which`),n("span",{class:"token punctuation"},"("),a("redundant"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"# remove redundant rules"),a(`
rules.pruned `),n("span",{class:"token operator"},"<-"),a(" rules.sorted"),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"!"),a("redundant"),n("span",{class:"token punctuation"},"]"),a(`
inspect`),n("span",{class:"token punctuation"},"("),a("rules.pruned"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"# Visualizing Association Rules"),a(`
library`),n("span",{class:"token punctuation"},"("),a("arulesViz"),n("span",{class:"token punctuation"},")"),a(`
plot`),n("span",{class:"token punctuation"},"("),a("rules.pruned"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),a(`
plot`),n("span",{class:"token punctuation"},"("),a("rules.pruned"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),a(" method"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"graph"'),n("span",{class:"token punctuation"},","),a(" control"),n("span",{class:"token operator"},"="),a("list"),n("span",{class:"token punctuation"},"("),a("type"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"items"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
plot`),n("span",{class:"token punctuation"},"("),a("rules.pruned"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token operator"},":"),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),a(" method"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"paracoord"'),n("span",{class:"token punctuation"},","),a(" control"),n("span",{class:"token operator"},"="),a("list"),n("span",{class:"token punctuation"},"("),a("reorder"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"TRUE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),en=n("h2",{id:"week-6-bayesian-networks-practical-5-cont",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#week-6-bayesian-networks-practical-5-cont","aria-hidden":"true"},"#"),a(" Week 6: Bayesian Networks (Practical 5: cont)")],-1),on={href:"https://colab.research.google.com/drive/19oPHv6nkKwgNVUHdQ-sLusUzPHevEJop?usp=sharing",target:"_blank",rel:"noopener noreferrer"},pn=n("h3",{id:"i-learning-local-causal-structures-from-data",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#i-learning-local-causal-structures-from-data","aria-hidden":"true"},"#"),a(" I. Learning local causal structures from data")],-1),cn=n("span",{style:{color:"orange"}},"PC-select function (PC-simple algorithm)",-1),ln=n("code",null,"pcalg",-1),rn=n("span",{style:{color:"orange"}},"learn the local network structure",-1),un={href:"https://cran.r-project.org/web/packages/pcalg/pcalg.pdf",target:"_blank",rel:"noopener noreferrer"},dn=n("br",null,null,-1),kn=n("code",null,"pcalg",-1),mn=n("span",{style:{color:"orange"}},"A different version",-1),vn=n("span",{style:{color:"orange"}},"cause randomly generated graph to change",-1),bn=n("code",null,"pcalg",-1),hn=c(`<ol><li>Check pcalg version</li></ol><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>packageVersion<span class="token punctuation">(</span><span class="token string">&quot;pcalg&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>Generate and draw random DAG with 10 nodes</li></ol><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>p <span class="token operator">&lt;-</span> <span class="token number">10</span>
set.seed<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
myDAG <span class="token operator">&lt;-</span> randomDAG<span class="token punctuation">(</span>p<span class="token punctuation">,</span> prob <span class="token operator">=</span> <span class="token number">0.25</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">(</span>Rgraphviz<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> plot<span class="token punctuation">(</span>myDAG<span class="token punctuation">,</span> main <span class="token operator">=</span> <span class="token string">&quot;randomDAG(10, prob = 0.25)&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Generate 10000 samples of the DAG using standard normal error distribution</li></ol><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>n <span class="token operator">&lt;-</span> <span class="token number">10000</span>
d.mat <span class="token operator">&lt;-</span> rmvDAG<span class="token punctuation">(</span>n<span class="token punctuation">,</span> myDAG<span class="token punctuation">,</span> errDist <span class="token operator">=</span> <span class="token string">&quot;normal&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Learn the causal structure around node 10th, i.e. which of the first 9 variables &quot;cause&quot; the tenth variable?</li></ol><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code><span class="token comment">#Learn the causal structure around node 10th</span>
<span class="token comment">#i.e. which of the first 9 variables &quot;cause&quot; the 10th variable?</span>
pcS <span class="token operator">&lt;-</span> pcSelect<span class="token punctuation">(</span>d.mat<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d.mat<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">)</span>
pcS 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+E+`" alt="Alt text" loading="lazy"><br> You can see from the result that variables <span style="color:orange;">1,2,3,4 are the causes of the target</span> (the variable 10).<br> By inspecting <code>zMin</code>, you can also see that the <span style="color:orange;">influence of variable 1 is the most evident from the data</span> (The larger the number, the more consistent is the edge with the data.)</p><ol start="5"><li>Apply PC algorithm to the <strong>d.mat</strong> dataset you just create (recall <a href="#week-4-learning-bayesian-network-structure-from-data">Practical 3</a>). What are the causes of the node 10 based on PC algorithm?</li></ol><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>You can see from the result that variables 1,2,3,4 are the causes of the target (the variable 10).<br> By inspecting <code>zMin</code>, you can also see that the influence of variable 1 is the most evident from the data (The larger the number, the more consistent is the edge with the data.)</p></div><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code># Apply PC algorithm to the d.mat dataset (recall Practical 3)
# What are the causes of the node 10th based on PC algorithm?
n &lt;- nrow(d.mat)
V &lt;- colnames(d.mat)
pc.fit = pc(
    suffStat = list(C = cor(d.mat), n=n),
    indepTest = gaussCItest,
    alpha = 0.01, 
    labels = V, 
    verbose = T
)
if (require(Rgraphviz)) {
    ## show estimated graph
    par(mfrow=c(1,2))
    plot(pc.fit, main = &quot;Estimated graph&quot;)
    plot(myDAG, main = &quot;True DAG&quot;)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ii-finding-parent-and-children-set-of-a-node-with-hiton-pc" tabindex="-1"><a class="header-anchor" href="#ii-finding-parent-and-children-set-of-a-node-with-hiton-pc" aria-hidden="true">#</a> II. Finding Parent and Children Set of a Node with HITON-PC</h3><p>The function <code>learn.nbr</code> in <code>bnlearn</code> is implemented to learn the local causal structure around a target node. This function can be used with different local causal structure learning algorithms, including <code>HITON-PC</code>.<br> In this example, we use the built-in asia data set from the <code>bnlearn</code> package to demonstrate the usage of <code>HITON-PC</code> in local causal discovery. The asia data set contains eight binary variables,</p><ol><li><span style="color:orange;font-weight:bold;">D</span> (dyspnoea),</li><li><span style="color:orange;font-weight:bold;">T</span> (tuberculosis),</li><li><span style="color:orange;font-weight:bold;">L</span> (lung cancer),</li><li><span style="color:orange;font-weight:bold;">B</span> (bronchitis),</li><li><span style="color:orange;font-weight:bold;">A</span> (visit to Asia),</li><li><span style="color:orange;font-weight:bold;">S</span> (smoking),</li><li><span style="color:orange;font-weight:bold;">X</span> (chest X-ray), and</li><li><span style="color:orange;font-weight:bold;">E</span> (tuberculosis versus lung cancer/bronchitis).</li></ol><p>We firstly use the function <code>si.hiton.pc</code> for learning the global causal structure from the data set. The following codes show how to learn the global causal structure from the asia data set.</p><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code><span class="token comment">####------II. Finding Parent and Children Set of a Node with HITON-PC--####</span>
library<span class="token punctuation">(</span>bnlearn<span class="token punctuation">)</span>
data<span class="token punctuation">(</span>asia<span class="token punctuation">)</span>
global.network <span class="token operator">=</span> si.hiton.pc<span class="token punctuation">(</span>asia<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>
plot<span class="token punctuation">(</span>global.network<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We now assume that node <span style="color:orange;font-weight:bold;">E</span> is the target variable, and we apply <code>HITON-PC</code> to learn the parents and children set of <span style="color:orange;font-weight:bold;">E</span>.</p><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>HITON.PC.E <span class="token operator">=</span> learn.nbr<span class="token punctuation">(</span>asia<span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&quot;si.hiton.pc&quot;</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>
HITON.PC.E
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+D+`" alt="HiTON Result of E" tabindex="0" loading="lazy"><figcaption>HiTON Result of E</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">Question</p><p>Is the parent and children set of E consistent with that in the global network?<br><strong>Answer</strong>: <span style="color:red;"><strong>Yes</strong></span>, nodes <code>T</code> and <code>L</code> are linked to <code>E</code> in the graph</p></div><p>In the <code>bnlearn</code> package, mutual information test is set as the default conditional independence test for binary variables. However, we can specify a different type of conditional independence test for <code>HITONPC</code>, e.g. Chi-square (denoted as “x2” in bnlearn) as follows:</p><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>HITON.PC.E <span class="token operator">=</span> learn.nbr<span class="token punctuation">(</span>asia<span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&quot;si.hiton.pc&quot;</span>  <span class="token punctuation">,</span> test<span class="token operator">=</span><span class="token string">&quot;x2&quot;</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>
HITON.PC.E
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iii-finding-markov-blanket-of-a-node" tabindex="-1"><a class="header-anchor" href="#iii-finding-markov-blanket-of-a-node" aria-hidden="true">#</a> III. Finding Markov Blanket of a Node</h3><figure><img src="`+I+`" alt="DAG" tabindex="0" loading="lazy"><figcaption>DAG</figcaption></figure><ol><li>Given a Bayesian network as in the following figure, what is the Markov Blanket (MB) of node Z?</li></ol><div class="hint-container info"><p class="hint-container-title">Info</p><p><strong>Hint</strong>: Let’s google it</p><p><span style="color:red;font-weight:bold;">A node’s Markov blanket includes all its parents, children, and children’s parents.</span></p></div><ol start="2"><li>Download “<a href="/data/unisa/AdvancedAnalytic2/prac5/Example21.csv">Example21</a>” dataset. It has the same dependence relationships as the above network</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>####------III. Finding Markov Blanket of a Node--#####
#Assuming the Example21.csv has been placed in the working directory
data=read.csv(&quot;Example21.csv&quot;, header=TRUE, sep=&quot;,&quot;)
head(data)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Learn the MB of Z from data using the IAMB algorithm from bnlearn</li></ol><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code><span class="token comment"># bnlearn requires numeric or factor data types. Convert data of the nine variables (nine columns) in the</span>
<span class="token comment"># data set to factor data types. </span>
nvar <span class="token operator">&lt;-</span> ncol<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">:</span>nvar<span class="token punctuation">)</span><span class="token punctuation">{</span>data<span class="token punctuation">[</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> as.factor<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token comment">#learn the markov blanket</span>
MB.Z<span class="token operator">=</span>learn.mb<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;Z&quot;</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">&quot;iamb&quot;</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>
MB.Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iv-estimating-causal-effect-of-a-variable-on-another-with-ida" tabindex="-1"><a class="header-anchor" href="#iv-estimating-causal-effect-of-a-variable-on-another-with-ida" aria-hidden="true">#</a> IV. Estimating causal effect of a variable on another with IDA</h3><p>Given a Bayesian network, we can estimate the causal effect that a node has on another. In this example, we re-use the dataset <strong>d.mat</strong> from Section II, and apply <code>ida</code> and <code>idaFast</code> functions from <code>pcalg</code> package to estimate the causal effects.</p><ol><li>Learn the causal structure from data.</li></ol><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code><span class="token comment">#------IV. Estimating causal effect of a variable on another with IDA</span>
<span class="token comment"># 1. Learn the causal structure from data.</span>
suffStat <span class="token operator">&lt;-</span> list<span class="token punctuation">(</span>C <span class="token operator">=</span> cor<span class="token punctuation">(</span>d.mat<span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> nrow<span class="token punctuation">(</span>d.mat<span class="token punctuation">)</span><span class="token punctuation">)</span>
pc.fit <span class="token operator">&lt;-</span> pc<span class="token punctuation">(</span>
    suffStat<span class="token punctuation">,</span> 
    indepTest <span class="token operator">=</span> gaussCItest<span class="token punctuation">,</span> 
    p<span class="token operator">=</span>ncol<span class="token punctuation">(</span>d.mat<span class="token punctuation">)</span><span class="token punctuation">,</span> 
    alpha <span class="token operator">=</span> <span class="token number">0.01</span>
<span class="token punctuation">)</span>
plot<span class="token punctuation">(</span>pc.fit<span class="token operator">@</span>graph<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Estimate the causal effect of node 2 on node 10.</li></ol><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>ida<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> cov<span class="token punctuation">(</span>d.mat<span class="token punctuation">)</span><span class="token punctuation">,</span> pc.fit<span class="token operator">@</span>graph<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>Estimate the causal effect of node 4 on nodes 10 and 6.</li></ol><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>ida<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> c<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cov<span class="token punctuation">(</span>d.mat<span class="token punctuation">)</span><span class="token punctuation">,</span> pc.fit<span class="token operator">@</span>graph<span class="token punctuation">)</span>
idaFast<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> c<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cov<span class="token punctuation">(</span>d.mat<span class="token punctuation">)</span><span class="token punctuation">,</span> pc.fit<span class="token operator">@</span>graph<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>If the equivalence class contains k DAGs, this will yield k estimated total causal effects.<br> 4. Estimate the causal effect of node 5 on node 7.</p><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>ida<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span> cov<span class="token punctuation">(</span>d.mat<span class="token punctuation">)</span><span class="token punctuation">,</span> pc.fit<span class="token operator">@</span>graph<span class="token punctuation">)</span>
idaFast<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span> cov<span class="token punctuation">(</span>d.mat<span class="token punctuation">)</span><span class="token punctuation">,</span> pc.fit<span class="token operator">@</span>graph<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>Calculate the causal effect of node 3 on nodes 6, 10.</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>idaFast(3, c(6,10), cov(d.mat), pc.fit@graph)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>Calculate the causal effect of node 2 on node 10 and node 8 on nodes 7, 9.</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>idaFast(2, 10, cov(d.mat), pc.fit@graph)
idaFast(8, c(7,9), cov(d.mat), pc.fit@graph)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v-summary-of-bayesian-networks" tabindex="-1"><a class="header-anchor" href="#v-summary-of-bayesian-networks" aria-hidden="true">#</a> V. Summary of Bayesian Networks</h3><ol><li>Generate and draw random DAG with 10 nodes (set seed to 50 and prob to 0.2)</li></ol><div class="language-r line-numbers-mode" data-ext="r"><pre class="language-r"><code>p <span class="token operator">&lt;-</span> <span class="token number">10</span>
set.seed<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
myDAG <span class="token operator">&lt;-</span> randomDAG<span class="token punctuation">(</span>p<span class="token punctuation">,</span> prob <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">(</span>Rgraphviz<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span> plot<span class="token punctuation">(</span>myDAG<span class="token punctuation">,</span> main <span class="token operator">=</span> <span class="token string">&quot;randomDAG(10, prob = 0.2)&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Generate 10000 samples of the DAG using standard normal error distribution</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>n &lt;- 10000
mydataset &lt;- rmvDAG(n, myDAG, errDist = &quot;normal&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Use PC algorithm to learn the causal structure of the dataset.</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>#3. Use PC algorithm to learn the causal structure of the dataset.
suffStat &lt;- list(C = cor(mydataset), n = nrow(mydataset))
my.pc.fit &lt;- pc(
    suffStat, 
    indepTest = gaussCItest, 
    p=ncol(mydataset), 
    alpha = 0.01
)
plot(my.pc.fit@graph)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Estimate the causal effects of node 2 on nodes 5,9.</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>#4. Estimate the causal effects of node 2 on nodes 5,9.
idaFast(2, c(5,9), cov(mydataset), my.pc.fit@graph)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>Find the parent and children set of node 7 using pcSelect (the PC-Simple algorithm)</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>#5. Find the parent and children set of node 7 using
# pcSelect (the PC-Simple algorithm)
pcS &lt;- pcSelect(dataset[,7],dataset[,-7], alpha = 0.05)
pcS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>Find the parent and children set of node 7 using HITON-PC</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>#6. Find the parent and children set of node 7 using HITON-PC
HITON.PC.7 &lt;- learn.nbr(data.frame(mydataset),&quot;X7&quot;, method = &quot;si.hiton.pc&quot;, alpha = 0.01)
HITON.PC.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>Learn the Markov blanket of node 7 from data</li></ol><div class="language-R line-numbers-mode" data-ext="R"><pre class="language-R"><code>#7. Learn the Markov blanket of node 7 from data
MB.X7 &lt;- learn.mb(
    data.frame(mydataset),
    &quot;X7&quot;,
    method = &quot;iamb&quot;, 
    alpha = 0.01
)
MB.X7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: <code>bnlearn</code> requires the input dataset in <strong>dataframe</strong> format. Use <code>dataset=data.frame(mydataset)</code> to convert the <strong>dataset</strong> to <strong>dataframe</strong> format. Also, check variables names returned after use <code>data.frame</code></p>`,61);function gn(fn,yn){const p=i("ExternalLinkIcon"),l=i("CodeTabs"),r=i("Tabs");return d(),k("div",null,[G,n("p",null,[a("In this section, using the "),N,a(" from the pcalg package to learn the "),z,a(" from data. "),n("a",L,[a("Please refer to the user manual of pcalg for more details"),o(p)])]),o(l,{id:"176",data:[{id:"Numeric"},{id:"Discrete"},{id:"Binary"}]},{title0:s(({value:t,isActive:e})=>[a("Numeric")]),title1:s(({value:t,isActive:e})=>[a("Discrete")]),title2:s(({value:t,isActive:e})=>[a("Binary")]),tab0:s(({value:t,isActive:e})=>[F]),tab1:s(({value:t,isActive:e})=>[O]),tab2:s(({value:t,isActive:e})=>[j]),_:1}),H,n("p",null,[n("a",M,[a("Resources"),o(p)])]),o(r,{id:"193",data:[{id:"Decision Tree"},{id:"Hierarchical clustering"},{id:"Outlier detection"},{id:"Associations Rules"}]},{title0:s(({value:t,isActive:e})=>[a("Decision Tree")]),title1:s(({value:t,isActive:e})=>[a("Hierarchical clustering")]),title2:s(({value:t,isActive:e})=>[a("Outlier detection")]),title3:s(({value:t,isActive:e})=>[a("Associations Rules")]),tab0:s(({value:t,isActive:e})=>[V,$]),tab1:s(({value:t,isActive:e})=>[U,W,X,Q]),tab2:s(({value:t,isActive:e})=>[n("p",null,[a("The below script uses the LOF (Local Outlier Factor) algorithm to detect outliers. The LOF algorithm identifies local otliers based on density. The detail of the algorithm can be seen in "),n("a",Z,[a("here"),o(p)])]),Y,J,K]),tab3:s(({value:t,isActive:e})=>[nn,an,sn,tn]),_:1}),en,n("p",null,[n("a",on,[a("Implementation on Google Colaboratory"),o(p)])]),pn,n("p",null,[a("In this section, we use the "),cn,a(" from the "),ln,a(" package to "),rn,a(" around one node from data. Please refer to the user manual of pcalg for "),n("a",un,[a("more details"),o(p)]),dn,a(" Following example is performed with "),kn,a(" version 2.7.3. "),mn,a(" can "),vn,a(", please install this version of "),bn,a(" or interpret your results accordingly to the graph.")]),hn])}const wn=u(B,[["render",gn],["__file","practices.01.html.vue"]]);export{wn as default};
