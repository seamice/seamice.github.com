import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as p,c as u,b as n,d as s,e,w as t,f as d}from"./app-7c51f5f5.js";const m={},k={href:"https://colab.research.google.com/drive/1al92FMOhPry8m20sqcF40w5au8AH5LPT?usp=sharing",target:"_blank",rel:"noopener noreferrer"},h=n("span",{style:{color:"red"}},"(Please do not made public)",-1),b={href:"https://colab.research.google.com/drive/1IVOY5bo8AK7gu2svt2rLpeIlYVpSeLIV?usp=sharing",target:"_blank",rel:"noopener noreferrer"},v=n("span",{style:{color:"red"}},"(Please do not made public)",-1),g=n("h2",{id:"annotated-bibliography",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#annotated-bibliography","aria-hidden":"true"},"#"),s(" Annotated bibliography")],-1),y={href:"https://medium.com/analytics-vidhya/text-summarization-using-bert-gpt2-xlnet-5ee80608e961",target:"_blank",rel:"noopener noreferrer"},_={class:"hint-container info"},w=n("p",{class:"hint-container-title"},"Info",-1),f=n("p",null,"Very general text to describe summarization.",-1),x={style:{color:"orange","font-weight":"bold"}},z={href:"https://jalammar.github.io/illustrated-gpt2/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://towardsdatascience.com/xlnet-a-clever-language-modeling-solution-ab41e87798b0",target:"_blank",rel:"noopener noreferrer"},P={href:"https://utomorezadwi.medium.com/bert-extractive-summarizer-vs-word2vec-extractive-summarizer-which-one-is-better-and-faster-c6d6d172cb91",target:"_blank",rel:"noopener noreferrer"},S={class:"hint-container info"},L=n("p",{class:"hint-container-title"},"Info",-1),A=n("p",null,"Very general text to describe summarization.",-1),V={style:{color:"orange","font-weight":"bold"}},I={href:"https://medium.com/data-science-in-your-pocket/text-summarization-using-textrank-in-nlp-4bce52c5b390",target:"_blank",rel:"noopener noreferrer"},q={href:"https://towardsdatascience.com/text-summarization-using-tf-idf-e64a0644ace3",target:"_blank",rel:"noopener noreferrer"},N={href:"https://medium.com/jatana/unsupervised-text-summarization-using-sentence-embeddings-adb15ce83db1",target:"_blank",rel:"noopener noreferrer"},G={href:"https://www.holisticseo.digital/python-seo/summarize/",target:"_blank",rel:"noopener noreferrer"},F=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"Info"),n("p",null,"Very general description fro summarization.")],-1),R={href:"https://www.turing.com/kb/5-powerful-text-summarization-techniques-in-python",target:"_blank",rel:"noopener noreferrer"},C=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" gensim"),n("span",{class:"token punctuation"},"."),s("summarization"),n("span",{class:"token punctuation"},"."),s("summarizer "),n("span",{class:"token keyword"},"import"),s(` summarize
`),n("span",{class:"token keyword"},"from"),s(" gensim"),n("span",{class:"token punctuation"},"."),s("summarization "),n("span",{class:"token keyword"},"import"),s(` keywords
`),n("span",{class:"token keyword"},"import"),s(` wikipedia
`),n("span",{class:"token keyword"},"import"),s(` en_core_web_sm

`),n("span",{class:"token comment"},"# To import the wikipedia content:"),s(`
wikisearch `),n("span",{class:"token operator"},"="),s(" wikipedia"),n("span",{class:"token punctuation"},"."),s("page"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),s(`
wikicontent `),n("span",{class:"token operator"},"="),s(" wikisearch"),n("span",{class:"token punctuation"},"."),s(`content
nlp `),n("span",{class:"token operator"},"="),s(" en_core_web_sm"),n("span",{class:"token punctuation"},"."),s("load"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
doc `),n("span",{class:"token operator"},"="),s(" nlp"),n("span",{class:"token punctuation"},"("),s("wikicontent"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"# To summarize based on percentage:"),s(`
summ_per `),n("span",{class:"token operator"},"="),s(" summarize"),n("span",{class:"token punctuation"},"("),s("wikicontent"),n("span",{class:"token punctuation"},","),s(" ratio "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Percent summary"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("summ_per"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"#To summarize based on word count:"),s(`
summ_words `),n("span",{class:"token operator"},"="),s(" summarize"),n("span",{class:"token punctuation"},"("),s("wikicontent"),n("span",{class:"token punctuation"},","),s(" word_count "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Word count summary"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("summ_words"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=n("p",null,[n("em",null,[n("strong",null,"LexRank")]),s(": LexRank is a graphical-based summarizer.")],-1),E=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" sumy"),n("span",{class:"token punctuation"},"."),s("summarizers"),n("span",{class:"token punctuation"},"."),s("lex_rank "),n("span",{class:"token keyword"},"import"),s(` LexRankSummarizer
summarizer_lex `),n("span",{class:"token operator"},"="),s(" LexRankSummarizer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"# Summarize using sumy LexRank"),s(`
summary`),n("span",{class:"token operator"},"="),s(" summarizer_lex"),n("span",{class:"token punctuation"},"("),s("parser"),n("span",{class:"token punctuation"},"."),s("document"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
lex_summary`),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'""'),s(`
`),n("span",{class:"token keyword"},"for"),s(" sentence "),n("span",{class:"token keyword"},"in"),s(" summary"),n("span",{class:"token punctuation"},":"),s(`
    lex_summary`),n("span",{class:"token operator"},"+="),n("span",{class:"token builtin"},"str"),n("span",{class:"token punctuation"},"("),s("sentence"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("lex_summary"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("p",null,[n("em",null,[n("strong",null,"Luhn")]),s(": Developed by an IBM researcher of the same name, Luhn is one of the oldest summarization algorithms and ranks sentences based on a frequency criterion for words.")],-1),M=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" sumy"),n("span",{class:"token punctuation"},"."),s("summarizers"),n("span",{class:"token punctuation"},"."),s("luhn "),n("span",{class:"token keyword"},"import"),s(` LuhnSummarizer
summarizer_1 `),n("span",{class:"token operator"},"="),s(" LuhnSummarizer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
summary_1 `),n("span",{class:"token operator"},"="),s("summarizer_1"),n("span",{class:"token punctuation"},"("),s("parser"),n("span",{class:"token punctuation"},"."),s("document"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"for"),s(" sentence "),n("span",{class:"token keyword"},"in"),s(" summary_1"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("sentence"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("p",null,[n("em",null,[n("strong",null,"LSA")]),s(": Latent semantic analysis is an automated method of summarization that utilizes term frequency with singular value decomposition. It has become one of the most used summarizers in recent years.")],-1),O=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"from"),s(" sumy"),n("span",{class:"token punctuation"},"."),s("summarizers"),n("span",{class:"token punctuation"},"."),s("lsa "),n("span",{class:"token keyword"},"import"),s(` LsaSummarizer
summarizer_lsa `),n("span",{class:"token operator"},"="),s(" LsaSummarizer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"# Summarize using sumy LSA"),s(`
summary `),n("span",{class:"token operator"},"="),s("summarizer_lsa"),n("span",{class:"token punctuation"},"("),s("parser"),n("span",{class:"token punctuation"},"."),s("document"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
lsa_summary`),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'""'),s(`

`),n("span",{class:"token keyword"},"for"),s(" sentence "),n("span",{class:"token keyword"},"in"),s(" summary"),n("span",{class:"token punctuation"},":"),s(`
    lsa_summary`),n("span",{class:"token operator"},"+="),n("span",{class:"token builtin"},"str"),n("span",{class:"token punctuation"},"("),s("sentence"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("lsa_summary"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("p",null,[n("em",null,[n("strong",null,"TextRank")]),s(": And last but not least, there is TextRank which works exactly the same as in Gensim.")],-1),H=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# Load Packages"),s(`
`),n("span",{class:"token keyword"},"from"),s(" sumy"),n("span",{class:"token punctuation"},"."),s("parsers"),n("span",{class:"token punctuation"},"."),s("plaintext "),n("span",{class:"token keyword"},"import"),s(` PlaintextParser
`),n("span",{class:"token keyword"},"from"),s(" sumy"),n("span",{class:"token punctuation"},"."),s("nlp"),n("span",{class:"token punctuation"},"."),s("tokenizers "),n("span",{class:"token keyword"},"import"),s(` Tokenizer

`),n("span",{class:"token comment"},"# For Strings"),s(`
parser `),n("span",{class:"token operator"},"="),s(" PlaintextParser"),n("span",{class:"token punctuation"},"."),s("from_string"),n("span",{class:"token punctuation"},"("),s("text"),n("span",{class:"token punctuation"},","),s("Tokenizer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"english"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"from"),s(" sumy"),n("span",{class:"token punctuation"},"."),s("summarizers"),n("span",{class:"token punctuation"},"."),s("text_rank "),n("span",{class:"token keyword"},"import"),s(` TextRankSummarizer

`),n("span",{class:"token comment"},"# Summarize using sumy TextRank"),s(`
summarizer `),n("span",{class:"token operator"},"="),s(" TextRankSummarizer"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
summary `),n("span",{class:"token operator"},"="),s("summarizer_4"),n("span",{class:"token punctuation"},"("),s("parser"),n("span",{class:"token punctuation"},"."),s("document"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
text_summary`),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'""'),s(`

`),n("span",{class:"token keyword"},"for"),s(" sentence "),n("span",{class:"token keyword"},"in"),s(" summary"),n("span",{class:"token punctuation"},":"),s(`
    text_summary`),n("span",{class:"token operator"},"+="),n("span",{class:"token builtin"},"str"),n("span",{class:"token punctuation"},"("),s("sentence"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("text_summary"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("p",null,"The 'Natural Language Toolkit' is an NLP-based toolkit in Python that helps with text summarization.",-1),X=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(` nltk
`),n("span",{class:"token keyword"},"from"),s(" nltk"),n("span",{class:"token punctuation"},"."),s("corpus "),n("span",{class:"token keyword"},"import"),s(` stopwords
`),n("span",{class:"token keyword"},"from"),s(" nltk"),n("span",{class:"token punctuation"},"."),s("tokenize "),n("span",{class:"token keyword"},"import"),s(" word_tokenize"),n("span",{class:"token punctuation"},","),s(` sent_tokenize

Input your text `),n("span",{class:"token keyword"},"for"),s(" summarizing below"),n("span",{class:"token punctuation"},":"),s(`

text `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token triple-quoted-string string"},'""" """'),s(`

`),n("span",{class:"token comment"},"# Next, you need to tokenize the text:"),s(`
stopWords `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"set"),n("span",{class:"token punctuation"},"("),s("stopwords"),n("span",{class:"token punctuation"},"."),s("words"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"english"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
words `),n("span",{class:"token operator"},"="),s(" word_tokenize"),n("span",{class:"token punctuation"},"("),s("text"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"# Now, you will need to create a frequency table to keep a score of each word:"),s(`
freqTable `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"dict"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"for"),s(" word "),n("span",{class:"token keyword"},"in"),s(" words"),n("span",{class:"token punctuation"},":"),s(`
    word `),n("span",{class:"token operator"},"="),s(" word"),n("span",{class:"token punctuation"},"."),s("lower"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" word "),n("span",{class:"token keyword"},"in"),s(" stopWords"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"continue"),s(`
    `),n("span",{class:"token keyword"},"if"),s(" word "),n("span",{class:"token keyword"},"in"),s(" freqTable"),n("span",{class:"token punctuation"},":"),s(`
        freqTable`),n("span",{class:"token punctuation"},"["),s("word"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token number"},"1"),s(`
    `),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},":"),s(`
        freqTable`),n("span",{class:"token punctuation"},"["),s("word"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1"),s(`

`),n("span",{class:"token comment"},"# Next, create a dictionary to keep the score of each sentence:"),s(`
sentences `),n("span",{class:"token operator"},"="),s(" sent_tokenize"),n("span",{class:"token punctuation"},"("),s("text"),n("span",{class:"token punctuation"},")"),s(`
sentenceValue `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"dict"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"for"),s(" sentence "),n("span",{class:"token keyword"},"in"),s(" sentences"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"for"),s(" word"),n("span",{class:"token punctuation"},","),s(" freq "),n("span",{class:"token keyword"},"in"),s(" freqTable"),n("span",{class:"token punctuation"},"."),s("items"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"if"),s(" word "),n("span",{class:"token keyword"},"in"),s(" sentence"),n("span",{class:"token punctuation"},"."),s("lower"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"if"),s(" word "),n("span",{class:"token keyword"},"in"),s(" sentence"),n("span",{class:"token punctuation"},"."),s("lower"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
                `),n("span",{class:"token keyword"},"if"),s(" sentence "),n("span",{class:"token keyword"},"in"),s(" sentenceValue"),n("span",{class:"token punctuation"},":"),s(`
                    sentenceValue`),n("span",{class:"token punctuation"},"["),s("sentence"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+="),s(` freq
                `),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},":"),s(`
                    sentenceValue`),n("span",{class:"token punctuation"},"["),s("sentence"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` freq
sumValues `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token keyword"},"for"),s(" sentence "),n("span",{class:"token keyword"},"in"),s(" sentenceValue"),n("span",{class:"token punctuation"},":"),s(`
    sumValues `),n("span",{class:"token operator"},"+="),s(" sentenceValue"),n("span",{class:"token punctuation"},"["),s("sentence"),n("span",{class:"token punctuation"},"]"),s(`

`),n("span",{class:"token comment"},"# Now, we define the average value from the original text as such:"),s(`
average `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"("),s("sumValues "),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("sentenceValue"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"# And lastly, we need to store the sentences into our summary:"),s(`
summary `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"''"),s(`
`),n("span",{class:"token keyword"},"for"),s(" sentence "),n("span",{class:"token keyword"},"in"),s(" sentences"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("sentence "),n("span",{class:"token keyword"},"in"),s(" sentenceValue"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"and"),s(),n("span",{class:"token punctuation"},"("),s("sentenceValue"),n("span",{class:"token punctuation"},"["),s("sentence"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1.2"),s(),n("span",{class:"token operator"},"*"),s(" average"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        summary `),n("span",{class:"token operator"},"+="),s(),n("span",{class:"token string"},'" "'),s(),n("span",{class:"token operator"},"+"),s(` sentence
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("summary"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),K=n("p",null,"To make use of Google’s T5 summarizer, there are a few prerequisites.",-1),U=n("p",null,"First, you will need to install PyTorch and Hugging Face’s Transformers. You can install the transformers using the code below:",-1),J=n("p",null,[n("code",null,"pip install transformers")],-1),Q=n("p",null,"Next, import PyTorch along with the AutoTokenizer and AutoModelWithLMHead objects:",-1),Z=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(` torch
`),n("span",{class:"token keyword"},"from"),s(" transformers"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"import"),s(" AutoTokenizer"),n("span",{class:"token punctuation"},","),s(` AutoModelWithLMHead
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$=n("p",null,"Next, you need to initialize the tokenizer model:",-1),nn=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("tokenizer "),n("span",{class:"token operator"},"="),s(" AutoTokenizer"),n("span",{class:"token punctuation"},"."),s("from_pretrained"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'t5-base'"),n("span",{class:"token punctuation"},")"),s(`
model `),n("span",{class:"token operator"},"="),s(" AutoModelWithLMHead"),n("span",{class:"token punctuation"},"."),s("from_pretrained"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'t5-base'"),n("span",{class:"token punctuation"},","),s(" return_dict"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),sn=n("p",null,"From here, you can use any data you like to summarize. Once you have gathered your data, input the code below to tokenize it:",-1),en=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("inputs "),n("span",{class:"token operator"},"="),s(" tokenizer"),n("span",{class:"token punctuation"},"."),s("encode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"summarize: "'),s(),n("span",{class:"token operator"},"+"),s(" text"),n("span",{class:"token punctuation"},","),s(`
    return_tensors`),n("span",{class:"token operator"},"="),n("span",{class:"token string"},"'pt'"),n("span",{class:"token punctuation"},","),s(`
    max_length`),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"512"),n("span",{class:"token punctuation"},","),s(`
    truncation`),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),an=n("p",null,"Now, you can generate the summary by using the model.generate function on T5:",-1),tn=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("summary_ids "),n("span",{class:"token operator"},"="),s(" model"),n("span",{class:"token punctuation"},"."),s("generate"),n("span",{class:"token punctuation"},"("),s("inputs"),n("span",{class:"token punctuation"},","),s(" max_length"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"150"),n("span",{class:"token punctuation"},","),s(" min_length"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"80"),n("span",{class:"token punctuation"},","),s(" length_penalty"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"5."),n("span",{class:"token punctuation"},","),s(" num_beams"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),on=n("p",null,"Feel free to replace the values mentioned above with your desired values. Once it’s ready, you can move on to decode the tokenized summary using the tokenizer.decode function:",-1),ln=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("summary "),n("span",{class:"token operator"},"="),s(" tokenizer"),n("span",{class:"token punctuation"},"."),s("decode"),n("span",{class:"token punctuation"},"("),s("summary_ids"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),cn=n("p",null,"And there you have it: a text summarizer with Google’s T5. You can replace the texts and values at any time to summarize various arrays of data.",-1),rn=n("p",null,"GPT-3 is a successor to the GPT-2 API and is much more capable and functional. Let’s take a look at how to get it running on Python with an example of downloading PDF research papers.",-1),pn=n("p",null,"First, you will need to import all dependencies:",-1),un=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(` openai
`),n("span",{class:"token keyword"},"import"),s(` wget
`),n("span",{class:"token keyword"},"import"),s(` pathlib
`),n("span",{class:"token keyword"},"import"),s(` pdfplumber
`),n("span",{class:"token keyword"},"import"),s(" numpy "),n("span",{class:"token keyword"},"as"),s(` np
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),dn=n("p",null,[s("You will then need to install openai to interact with GPT-3, so make sure you have an API key. You can get one here."),n("br"),s(" You will also need wget to download PDFs from the internet. This will further require pdfplumber to convert it back to text. Install all three with pip:")],-1),mn=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[s("pip "),n("span",{class:"token function"},"install"),s(` openai
pip `),n("span",{class:"token function"},"install"),s(),n("span",{class:"token function"},"wget"),s(`
pip `),n("span",{class:"token function"},"install"),s(` pdfplumber
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),kn=n("p",null,"To download the PDF and return its local path, enter the following:",-1),hn=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"getPaper"),n("span",{class:"token punctuation"},"("),s("paper_url"),n("span",{class:"token punctuation"},","),s(" filename"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"random_paper.pdf"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token triple-quoted-string string"},`"""
    Downloads a paper from the given url and returns
    the local path to that file.
    """`),s(`
    
    downloadedPaper `),n("span",{class:"token operator"},"="),s(" wget"),n("span",{class:"token punctuation"},"."),s("download"),n("span",{class:"token punctuation"},"("),s("paper_url"),n("span",{class:"token punctuation"},","),s(" filename"),n("span",{class:"token punctuation"},")"),s(`
    downloadedPaperFilePath `),n("span",{class:"token operator"},"="),s(" pathlib"),n("span",{class:"token punctuation"},"."),s("Path"),n("span",{class:"token punctuation"},"("),s("downloadedPaper"),n("span",{class:"token punctuation"},")"),s(`
    
    `),n("span",{class:"token keyword"},"return"),s(` downloadedPaperFilePath
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),bn=n("p",null,"Now, you need to convert the PDF into text so GPT-3 can read it:",-1),vn=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("paperFilePath "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"random_paper.pdf"'),s(`
paperContent `),n("span",{class:"token operator"},"="),s(" pdfplumber"),n("span",{class:"token punctuation"},"."),n("span",{class:"token builtin"},"open"),n("span",{class:"token punctuation"},"("),s("paperFilePath"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s(`pages

`),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"displayPaperContent"),n("span",{class:"token punctuation"},"("),s("paperContent"),n("span",{class:"token punctuation"},","),s(" page_start"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" page_end"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"for"),s(" page "),n("span",{class:"token keyword"},"in"),s(" paperContent"),n("span",{class:"token punctuation"},"["),s("page_start"),n("span",{class:"token punctuation"},":"),s("page_end"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("page"),n("span",{class:"token punctuation"},"."),s("extract_text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`

displayPaperContent`),n("span",{class:"token punctuation"},"("),s("paperContent"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),gn=n("p",null,"Now that you have the text, it’s time to start summarizing it:",-1),yn=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"showPaperSummary"),n("span",{class:"token punctuation"},"("),s("paperContent"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    tldr_tag `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"\\n tl;dr:"'),s(`
    openai`),n("span",{class:"token punctuation"},"."),s("organization "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'organization key'"),s(`
    openai`),n("span",{class:"token punctuation"},"."),s("api_key "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"your api key"'),s(`
    engine_list `),n("span",{class:"token operator"},"="),s(" openai"),n("span",{class:"token punctuation"},"."),s("Engine"),n("span",{class:"token punctuation"},"."),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_n=n("p",null,"Here, we are letting the GPT-3 model know that we require a summary. Then, we proceed to set up the environment to use the openai API.",-1),wn=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token keyword"},"for"),s(" page "),n("span",{class:"token keyword"},"in"),s(" paperContent"),n("span",{class:"token punctuation"},":"),s(`
    text `),n("span",{class:"token operator"},"="),s(" page"),n("span",{class:"token punctuation"},"."),s("extract_text"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(` tldr_tag
    response `),n("span",{class:"token operator"},"="),s(" openai"),n("span",{class:"token punctuation"},"."),s("Completion"),n("span",{class:"token punctuation"},"."),s("create"),n("span",{class:"token punctuation"},"("),s(`
        engine`),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"davinci"'),n("span",{class:"token punctuation"},","),s(`
        prompt`),n("span",{class:"token operator"},"="),s("text"),n("span",{class:"token punctuation"},","),s(`
        temperature`),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0.3"),n("span",{class:"token punctuation"},","),s(` 
        max_tokens`),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"140"),n("span",{class:"token punctuation"},","),s(`
        top_p`),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(`
        frequency_penalty`),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(`
        presence_penalty`),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(`
        stop`),n("span",{class:"token operator"},"="),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"\\n"'),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("response"),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"choices"'),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},'"text"'),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),fn=n("p",null,[s("This code extracts the text from each page, feeds the GPT-3 model the max tokens for each page, and prints it to the terminal."),n("br"),s(" Now that everything is set up, we can run the summarizer:")],-1),xn=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("paperContent "),n("span",{class:"token operator"},"="),s(" pdfplumber"),n("span",{class:"token punctuation"},"."),n("span",{class:"token builtin"},"open"),n("span",{class:"token punctuation"},"("),s("paperFilePath"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s(`pages
showPaperSummary`),n("span",{class:"token punctuation"},"("),s("paperContent"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),zn=n("p",null,[s("Text summarization is very useful for people dealing with large amounts of written data on a daily basis, such as online magazines, research sites, and even for teachers in schools."),n("br"),s(" While there are simple methods of text summarization in Python such as Gensim and Sumy, there are far more powerful but slightly complicated summarizers such as T5 and GPT-3.")],-1),Tn=n("p",null,"Which technique to choose really comes down to preference and the use-case for each of these summarizers. But in theory, AI-based summarizers will prove better in the long run as they will constantly learn and provide superior results.",-1),Pn={href:"https://www.activestate.com/blog/how-to-do-text-summarization-with-python/",target:"_blank",rel:"noopener noreferrer"},Sn=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"Info"),n("p",null,"Text summarises based on frequency metric")],-1),Ln={href:"https://www.mygreatlearning.com/blog/text-summarization-in-python/",target:"_blank",rel:"noopener noreferrer"},An=d(`<div class="hint-container info"><p class="hint-container-title">Not valuable</p><p>Abstractive Summarization</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Step 1: import the required libraries. </span>
<span class="token keyword">from</span> nltk<span class="token punctuation">.</span>corpus <span class="token keyword">import</span> stopwords
<span class="token keyword">from</span> nltk<span class="token punctuation">.</span>tokenize <span class="token keyword">import</span> word_tokenize<span class="token punctuation">,</span> sent_tokenize

<span class="token comment"># Step 2: Remove the Stop Words and store them in a separate array of words.</span>
<span class="token comment">#Stop Words</span>
<span class="token comment">#  Words such as is, an, a, the, and ‘for‘ do not add value to the meaning of a sentence. For example, let us take a look at the following sentence:</span>
<span class="token comment">#  GreatLearning is one of the most valuable websites for ArtificialIntelligence aspirants.</span>
<span class="token comment">#  After removing the stop words in the above sentence, we can narrow the number of words and preserve the meaning as follows:</span>
<span class="token comment">#  [‘GreatLearning’, ‘one’, ‘useful’, ‘website’, ‘ArtificialIntelligence‘, ‘aspirants’, ‘.’]</span>

<span class="token comment"># Step 3: create a frequency table of the words.</span>
stopwords <span class="token operator">=</span> <span class="token builtin">set</span> <span class="token punctuation">(</span>stopwords<span class="token punctuation">.</span>words<span class="token punctuation">(</span><span class="token string">&quot;english&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
words <span class="token operator">=</span> word_tokenize<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
freqTable <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Step 4: We will assign a score to each sentence depending on the words it contains and the frequency table.</span>
sentences <span class="token operator">=</span> sent_tokenize<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
sentenceValue <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Step 5: Assign a score to compare the sentences within the text.</span>
sumValues <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> sentence <span class="token keyword">in</span> sentenceValue<span class="token punctuation">:</span>
    sumValues <span class="token operator">+=</span> sentenceValue<span class="token punctuation">[</span>sentence<span class="token punctuation">]</span>
average <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sumValues <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sentenceValue<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1),Vn={href:"https://pypi.org/project/bert-extractive-summarizer/",target:"_blank",rel:"noopener noreferrer"},In={href:"https://towardsdatascience.com/summarize-a-text-with-python-continued-bbbbb5d37adb",target:"_blank",rel:"noopener noreferrer"},qn=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"Info"),n("p",null,[s("Text Summarization Using "),n("span",{style:{color:"orange","font-weight":"bold"}},"NLTK"),s(".")])],-1),Nn={href:"https://www.geeksforgeeks.org/python-text-summarizer/",target:"_blank",rel:"noopener noreferrer"},Gn=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"Info"),n("p",null,[s("Text Summarization Using "),n("span",{style:{color:"orange","font-weight":"bold"}},"NLTK"),s(".")])],-1),Fn={href:"https://cloud.google.com/vertex-ai/docs/samples/aiplatform-sdk-summarization#whats-next",target:"_blank",rel:"noopener noreferrer"},Rn=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"Info"),n("p",null,[s("Summarization using google generative AI. "),n("span",{style:{color:"orange","font-weight":"bold"}},"(Useful but huge project, it will takes lots of time to validate)")])],-1),Cn={href:"https://github.com/zihangdai/xlnet",target:"_blank",rel:"noopener noreferrer"},Wn=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"Info"),n("p",null,[s("Valuable project using"),n("span",{style:{color:"orange","font-weight":"bold"}},"XLNet"),s(". It will takes lot of time to validate.")])],-1),En={href:"https://medium.com/keyreply/xlnet-a-new-pre-training-method-outperforming-bert-on-20-tasks-b34daeee8edb",target:"_blank",rel:"noopener noreferrer"},Bn=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"Info"),n("p",null,[s("Describe another approach "),n("span",{style:{color:"orange","font-weight":"bold"}},"(XLNet)"),s(" versus to BERT.")])],-1),Mn={href:"https://jalammar.github.io/illustrated-gpt2/",target:"_blank",rel:"noopener noreferrer"},Dn=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"Info"),n("p",null,"Principle introduction")],-1);function On(jn,Hn){const a=i("ExternalLinkIcon"),c=i("Tabs");return p(),u("div",null,[n("ol",null,[n("li",null,[n("a",k,[s("Extractive Summarization on Colab "),h,e(a)])]),n("li",null,[n("a",b,[s("OpenAI test on Colab "),v,e(a)])])]),g,n("ol",null,[n("li",null,[n("p",null,[n("a",y,[s("Text Summarization using BERT, GPT2, XLNet"),e(a)])]),n("div",_,[w,f,n("p",null,[s("Other options are given: "),n("span",x,[n("a",z,[s("GPT2"),e(a)]),s(", "),n("a",T,[s("XLNet"),e(a)])])])])]),n("li",null,[n("p",null,[n("a",P,[s("BERT Extractive Summarizer vs Word2Vec Extractive Summarizer: Which one is better and faster?"),e(a)])]),n("div",S,[L,A,n("p",null,[s("Other options are given: "),n("span",V,[n("a",I,[s("TextRank"),e(a)]),s(", "),n("a",q,[s("TF-IDF"),e(a)]),s(", and "),n("a",N,[s("Word2Vec"),e(a)])])])])]),n("li",null,[n("p",null,[n("a",G,[s("Extractive Summarization with BERT Extractive Summarizer"),e(a)])]),F]),n("li",null,[n("p",null,[n("a",R,[s("5 Powerful Text Summarization Techniques in Python"),e(a)])]),e(c,{id:"56",data:[{id:"Gensim"},{id:"Sumy"},{id:"NLTK"},{id:"T5"},{id:"GPT-3"}]},{title0:t(({value:o,isActive:l})=>[s("Gensim")]),title1:t(({value:o,isActive:l})=>[s("Sumy")]),title2:t(({value:o,isActive:l})=>[s("NLTK")]),title3:t(({value:o,isActive:l})=>[s("T5")]),title4:t(({value:o,isActive:l})=>[s("GPT-3")]),tab0:t(({value:o,isActive:l})=>[C]),tab1:t(({value:o,isActive:l})=>[W,E,B,M,D,O,j,H]),tab2:t(({value:o,isActive:l})=>[Y,X]),tab3:t(({value:o,isActive:l})=>[K,U,J,Q,Z,$,nn,sn,en,an,tn,on,ln,cn]),tab4:t(({value:o,isActive:l})=>[rn,pn,un,dn,mn,kn,hn,bn,vn,gn,yn,_n,wn,fn,xn,zn,Tn]),_:1})]),n("li",null,[n("p",null,[n("a",Pn,[s("How to do text summarization with deep learning and Python"),e(a)])]),Sn]),n("li",null,[n("p",null,[n("a",Ln,[s("Text Summarization in Python"),e(a)])]),An]),n("li",null,[n("p",null,[n("a",Vn,[s("Bert Offical Website"),e(a)])])]),n("li",null,[n("p",null,[n("a",In,[s("Summarize a Text with Python — Continued"),e(a)])]),qn]),n("li",null,[n("p",null,[n("a",Nn,[s("Python | Text Summarizer"),e(a)])]),Gn]),n("li",null,[n("p",null,[n("a",Fn,[s("Summarize text content using Generative AI (Generative AI)"),e(a)])]),Rn]),n("li",null,[n("p",null,[n("a",Cn,[s("Github XLNet(zihangdai)"),e(a)])]),Wn]),n("li",null,[n("p",null,[n("a",En,[s("XLNet — A new pre-training method outperforming BERT on 20 tasks"),e(a)])]),Bn]),n("li",null,[n("p",null,[n("a",Mn,[s("The Illustrated GPT-2 (Visualizing Transformer Language Models)"),e(a)])]),Dn])])])}const Kn=r(m,[["render",On],["__file","Summarization.html.vue"]]);export{Kn as default};
