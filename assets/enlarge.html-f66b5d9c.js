const n=JSON.parse(`{"key":"v-19627d60","path":"/techniques/geoscience/enlarge.html","title":"AI Super Resoluction","lang":"en-US","frontmatter":{"title":"AI Super Resoluction","icon":"circle-dot","date":"2023-07-10T00:00:00.000Z","category":["geoscience"],"tag":["gdal","warp","gcp"],"star":false,"sticky":true,"description":"Single File to Super Resolution for Tiff conf.py import environ import os ## load environment file environ.Env.read_env(\\"base.env\\") ## load GDAL DLL path env = environ.Env() os.add_dll_directory(env('GDAL_DLL', default=r'D:\\\\tools\\\\anaconda3-2023\\\\Library\\\\bin')) def init(): ## load environment file environ.Env.read_env(\\"base.env\\") ## load GDAL DLL path env = environ.Env() os.add_dll_directory(env('GDAL_DLL', default=r'D:\\\\tools\\\\anaconda3-2023\\\\Library\\\\bin')) enlarge.py import os from conf import * init() from osgeo import gdal from PIL import Image import numpy as np import math from diffusers import LDMSuperResolutionPipeline import torch import threading from threads import * import copy import json from multiprocessing import Process, Pipe from http_pool.http_pools import Pool pipeline = None device = \\"cuda\\" if torch.cuda.is_available() else \\"cpu\\" model_id = \\"CompVis/ldm-super-resolution-4x-openimages\\" pipeline = LDMSuperResolutionPipeline.from_pretrained(model_id) pipeline = pipeline.to(device) def getPipeline(): #if None is not pipeline: # return pipeline device = \\"cuda\\" if torch.cuda.is_available() else \\"cpu\\" model_id = \\"CompVis/ldm-super-resolution-4x-openimages\\" pipeline = LDMSuperResolutionPipeline.from_pretrained(model_id) pipeline = pipeline.to(device) return pipeline def superResolution(pipe, img): Image.frombytes(img) enlarge = pipeline(img) pipe.send(enlarge) print('*****************************************************') class TiffSuperResoluction: def __init__(self, img_path, thread_count = 1): self.__img_path__ = img_path self.__x_idx__ = 0 self.__y_idx__ = 0 self.__tile_size__ = 256 self.__init_tif__() self.__pipeline = getPipeline() self.__tile_list__ = list() self.__locker__ = threading.Lock() self.__read_locker__ = threading.Lock() self.__thread_count__ = thread_count def __init_tif__(self): # Read Source file self.__ds__ = gdal.Open(self.__img_path__, gdal.GA_ReadOnly) if self.__ds__ is None: print(f\\"Could not open image file {self.__img_path__}\\") return None trans = copy.copy(list(self.__ds__.GetGeoTransform())) trans[1]/=4 trans[5]/=4 ## Create Output file driver = gdal.GetDriverByName(\\"GTiff\\") if os.path.exists(self.__get_enlarge_file__()): self.__ret_ds__ = gdal.Open(self.__get_enlarge_file__(), gdal.GA_Update) else: self.__ret_ds__ = driver.Create( self.__get_enlarge_file__(), self.__get_width__()*4, self.__get_height__()*4, self.__get_band_count__(), gdal.GDT_Byte ) self.__ret_ds__.SetGeoTransform(tuple(trans)) def __get_json_file__(self): path, _ = os.path.splitext(self.__img_path__) return f\\"{path}-enlarge.json\\" def __get_log_file__(self): path, _ = os.path.splitext(self.__img_path__) return f\\"{path}-enlarge.log\\" def __get_enlarge_file__(self): path, ext = os.path.splitext(self.__img_path__) return f\\"{path}-enlarge{ext}\\" def __get_maxx__(self): return math.ceil(self.__ds__.RasterXSize/self.__tile_size__) def __get_maxy__(self): return math.ceil(self.__ds__.RasterYSize/self.__tile_size__) def __get_width__(self): return self.__ds__.RasterXSize def __get_height__(self): return self.__ds__.RasterYSize def __get_band_count__(self): return self.__ds__.RasterCount def __super_resolution__(self, img): ret = None try: ret = self.__pipeline(img, num_inference_steps=100, eta=1).images[0] except Exception as e: print('error happened') print(e) finally: return ret def write_process(self, x_idx, y_idx): with open(self.__get_log_file__(), 'w') as fw: fw.write(f'{x_idx} {y_idx}') def write_tile_list(self, tile_list): with open(self.__get_json_file__(), 'w') as fw: fw.write(json.dumps(tile_list)) def get_process(self): x_idx = 0 y_idx = 0 if os.path.exists(self.__get_log_file__()): with open(self.__get_log_file__(), 'r') as fr: line = fr.readline() x_idx, y_idx = line.split(\\" \\") x_idx = int(x_idx) y_idx = int(y_idx) return (x_idx, y_idx) def __calc_tile_list__(self): for x_idx in range(self.__x_idx__,self.__get_maxx__()): for y_idx in range(self.__y_idx__, math.ceil(self.__get_maxy__())): self.__tile_list__.append({\\"x\\": x_idx, \\"y\\": y_idx, \\"t\\": self.__tile_size__}) def __tile__(self, x_idx, y_idx, tile_size): temp = self.__get_width__() - x_idx * tile_size width = tile_size if temp &gt;= tile_size else temp temp = self.__get_height__() - y_idx * tile_size height = tile_size if temp &gt;= tile_size else temp x_offset = x_idx * tile_size y_offset = y_idx * tile_size band1 = None band2 = None band3 = None with self.__read_locker__: band1 = self.__ds__.GetRasterBand(1).ReadAsArray(x_offset, y_offset, width, height) band2 = self.__ds__.GetRasterBand(2).ReadAsArray(x_offset, y_offset, width, height) band3 = self.__ds__.GetRasterBand(3).ReadAsArray(x_offset, y_offset, width, height) image = Image.fromarray(np.stack((band1, band2, band3), axis=-1)) return image def __get_tile__(self): for x_idx in range(self.__x_idx__,self.__get_maxx__()): temp = self.__get_width__() - x_idx * self.__tile_size__ width = self.__tile_size__ if temp &gt;= self.__tile_size__ else temp for y_idx in range(self.__y_idx__, math.ceil(self.__get_maxy__())): temp = self.__get_height__() - y_idx * self.__tile_size__ height = self.__tile_size__ if temp &gt;= self.__tile_size__ else temp x_offset = x_idx * self.__tile_size__ y_offset = y_idx * self.__tile_size__ band1 = self.__ds__.GetRasterBand(1).ReadAsArray(x_offset, y_offset, width, height) band2 = self.__ds__.GetRasterBand(2).ReadAsArray(x_offset, y_offset, width, height) band3 = self.__ds__.GetRasterBand(3).ReadAsArray(x_offset, y_offset, width, height) image = Image.fromarray(np.stack((band1, band2, band3), axis=-1)) yield x_idx, y_idx, image def __write__(self, x_idx, y_idx, enlarge_tile): array = np.array(enlarge_tile) for i in range(array.shape[2]): self.__ret_ds__.GetRasterBand(i+1).WriteArray(array[:,:,i], x_idx*self.__tile_size__*4, y_idx*self.__tile_size__*4) def __del__(self): self.__ds__ = None self.__ret_ds__ = None #def run(self, x_idx = 0, y_idx = 0, tile_size = 256): # self.__x_idx__ = x_idx # self.__y_idx__ = y_idx # self.__tile_size__ = tile_size # if os.path.exists(self.__get_log_file__()): # self.__x_idx__, self.__y_idx__ = self.get_process() # for x_idx, y_idx, tile in self.__get_tile__(): # print(self.__img_path__, x_idx, y_idx, \\"/\\", self.__get_maxx__(), self.__get_maxy__()) # self.write_process(x_idx, y_idx) # enlarge = self.__super_resolution__(tile) # if enlarge: # self.__write__(x_idx, y_idx, enlarge) # if os.path.exists(self.__get_log_file__()): # os.rmdir(self.__get_log_file__()) def write_json(self): with open(self.__get_json_file__(), 'w') as fw: fw.write(json.dumps(self.__tile_list__)) def read_json(self): with open(self.__get_json_file__(), 'r') as fr: self.__tile_list__ = json.loads(fr.read()) def process_tile(self, tile_info): print('processing') x_idx = tile_info['x'] y_idx = tile_info['y'] tile_size = tile_info['t'] parent_conn, child_conn = Pipe() p1 = Process(target=superResolution, args=(parent_conn, self.__tile__(x_idx, y_idx, tile_size))) p1.start() ret = child_conn.recv() with open(f'test/{x_idx}-{y_idx}.jpg', wb) as fw: fw.write(ret) #try: # enlarge = self.__super_resolution__(self.__tile__(x_idx, y_idx, tile_size)) # with self.__locker__: # if enlarge: # self.__write__(x_idx, y_idx, enlarge) # self.write_json() # else: # self.__tile_list__.append(tile_info) #except Exception as e: # print(e) # print('processing exception') # self.__tile_list__.append(tile_info) def thread_run(self, tile_size = 256): self.__tile_size__ = tile_size if not os.path.exists(self.__get_json_file__()): self.__calc_tile_list__() self.write_json() else: self.read_json() thread_obj = thread_util(self.__thread_count__) while len(self.__tile_list__) &gt; 0: i = self.__tile_list__.pop() print(self.__img_path__, i['x'], i['y'], \\"/\\", self.__get_maxx__(), self.__get_maxy__()) thread_obj.process(self.process_tile, (i,), json.dumps(i)) thread_obj.wait() def run(self, tile_size = 256): self.__tile_size__ = tile_size if not os.path.exists(self.__get_json_file__()): self.__calc_tile_list__() self.write_json() else: self.read_json() while len(self.__tile_list__) &gt; 0: i = self.__tile_list__.pop() self.process_tile(i) #base_path = r'D:\\\\BaiduNetdiskDownload\\\\SuperResolution' base_path = r'E:\\\\BaiduNetdiskDownload\\\\FirstBatch' tif_list = map( lambda x: os.path.join(base_path, x), filter(lambda x: x.endswith('.tif'), os.listdir(base_path)) ) #for tif in tif_list: # if tif.lower().endswith('-enlarge.tif'): # continue # try: # TiffSuperResoluction(tif).run() # #TiffSuperResoluction(tif).run(tile_size=512) # except Exception as e: # print(\\"Exception\\") # else: # pass for tif in tif_list: if tif.lower().endswith('-enlarge.tif'): continue try: TiffSuperResoluction(tif, 2).thread_run() #TiffSuperResoluction(tif).run() except Exception as e: print(\\"Exception\\") print(e) else: pass","head":[["meta",{"property":"og:url","content":"https://seamice.github.io/blog/techniques/geoscience/enlarge.html"}],["meta",{"property":"og:site_name","content":"Haiyue's Blog"}],["meta",{"property":"og:title","content":"AI Super Resoluction"}],["meta",{"property":"og:description","content":"Single File to Super Resolution for Tiff conf.py import environ import os ## load environment file environ.Env.read_env(\\"base.env\\") ## load GDAL DLL path env = environ.Env() os.add_dll_directory(env('GDAL_DLL', default=r'D:\\\\tools\\\\anaconda3-2023\\\\Library\\\\bin')) def init(): ## load environment file environ.Env.read_env(\\"base.env\\") ## load GDAL DLL path env = environ.Env() os.add_dll_directory(env('GDAL_DLL', default=r'D:\\\\tools\\\\anaconda3-2023\\\\Library\\\\bin')) enlarge.py import os from conf import * init() from osgeo import gdal from PIL import Image import numpy as np import math from diffusers import LDMSuperResolutionPipeline import torch import threading from threads import * import copy import json from multiprocessing import Process, Pipe from http_pool.http_pools import Pool pipeline = None device = \\"cuda\\" if torch.cuda.is_available() else \\"cpu\\" model_id = \\"CompVis/ldm-super-resolution-4x-openimages\\" pipeline = LDMSuperResolutionPipeline.from_pretrained(model_id) pipeline = pipeline.to(device) def getPipeline(): #if None is not pipeline: # return pipeline device = \\"cuda\\" if torch.cuda.is_available() else \\"cpu\\" model_id = \\"CompVis/ldm-super-resolution-4x-openimages\\" pipeline = LDMSuperResolutionPipeline.from_pretrained(model_id) pipeline = pipeline.to(device) return pipeline def superResolution(pipe, img): Image.frombytes(img) enlarge = pipeline(img) pipe.send(enlarge) print('*****************************************************') class TiffSuperResoluction: def __init__(self, img_path, thread_count = 1): self.__img_path__ = img_path self.__x_idx__ = 0 self.__y_idx__ = 0 self.__tile_size__ = 256 self.__init_tif__() self.__pipeline = getPipeline() self.__tile_list__ = list() self.__locker__ = threading.Lock() self.__read_locker__ = threading.Lock() self.__thread_count__ = thread_count def __init_tif__(self): # Read Source file self.__ds__ = gdal.Open(self.__img_path__, gdal.GA_ReadOnly) if self.__ds__ is None: print(f\\"Could not open image file {self.__img_path__}\\") return None trans = copy.copy(list(self.__ds__.GetGeoTransform())) trans[1]/=4 trans[5]/=4 ## Create Output file driver = gdal.GetDriverByName(\\"GTiff\\") if os.path.exists(self.__get_enlarge_file__()): self.__ret_ds__ = gdal.Open(self.__get_enlarge_file__(), gdal.GA_Update) else: self.__ret_ds__ = driver.Create( self.__get_enlarge_file__(), self.__get_width__()*4, self.__get_height__()*4, self.__get_band_count__(), gdal.GDT_Byte ) self.__ret_ds__.SetGeoTransform(tuple(trans)) def __get_json_file__(self): path, _ = os.path.splitext(self.__img_path__) return f\\"{path}-enlarge.json\\" def __get_log_file__(self): path, _ = os.path.splitext(self.__img_path__) return f\\"{path}-enlarge.log\\" def __get_enlarge_file__(self): path, ext = os.path.splitext(self.__img_path__) return f\\"{path}-enlarge{ext}\\" def __get_maxx__(self): return math.ceil(self.__ds__.RasterXSize/self.__tile_size__) def __get_maxy__(self): return math.ceil(self.__ds__.RasterYSize/self.__tile_size__) def __get_width__(self): return self.__ds__.RasterXSize def __get_height__(self): return self.__ds__.RasterYSize def __get_band_count__(self): return self.__ds__.RasterCount def __super_resolution__(self, img): ret = None try: ret = self.__pipeline(img, num_inference_steps=100, eta=1).images[0] except Exception as e: print('error happened') print(e) finally: return ret def write_process(self, x_idx, y_idx): with open(self.__get_log_file__(), 'w') as fw: fw.write(f'{x_idx} {y_idx}') def write_tile_list(self, tile_list): with open(self.__get_json_file__(), 'w') as fw: fw.write(json.dumps(tile_list)) def get_process(self): x_idx = 0 y_idx = 0 if os.path.exists(self.__get_log_file__()): with open(self.__get_log_file__(), 'r') as fr: line = fr.readline() x_idx, y_idx = line.split(\\" \\") x_idx = int(x_idx) y_idx = int(y_idx) return (x_idx, y_idx) def __calc_tile_list__(self): for x_idx in range(self.__x_idx__,self.__get_maxx__()): for y_idx in range(self.__y_idx__, math.ceil(self.__get_maxy__())): self.__tile_list__.append({\\"x\\": x_idx, \\"y\\": y_idx, \\"t\\": self.__tile_size__}) def __tile__(self, x_idx, y_idx, tile_size): temp = self.__get_width__() - x_idx * tile_size width = tile_size if temp &gt;= tile_size else temp temp = self.__get_height__() - y_idx * tile_size height = tile_size if temp &gt;= tile_size else temp x_offset = x_idx * tile_size y_offset = y_idx * tile_size band1 = None band2 = None band3 = None with self.__read_locker__: band1 = self.__ds__.GetRasterBand(1).ReadAsArray(x_offset, y_offset, width, height) band2 = self.__ds__.GetRasterBand(2).ReadAsArray(x_offset, y_offset, width, height) band3 = self.__ds__.GetRasterBand(3).ReadAsArray(x_offset, y_offset, width, height) image = Image.fromarray(np.stack((band1, band2, band3), axis=-1)) return image def __get_tile__(self): for x_idx in range(self.__x_idx__,self.__get_maxx__()): temp = self.__get_width__() - x_idx * self.__tile_size__ width = self.__tile_size__ if temp &gt;= self.__tile_size__ else temp for y_idx in range(self.__y_idx__, math.ceil(self.__get_maxy__())): temp = self.__get_height__() - y_idx * self.__tile_size__ height = self.__tile_size__ if temp &gt;= self.__tile_size__ else temp x_offset = x_idx * self.__tile_size__ y_offset = y_idx * self.__tile_size__ band1 = self.__ds__.GetRasterBand(1).ReadAsArray(x_offset, y_offset, width, height) band2 = self.__ds__.GetRasterBand(2).ReadAsArray(x_offset, y_offset, width, height) band3 = self.__ds__.GetRasterBand(3).ReadAsArray(x_offset, y_offset, width, height) image = Image.fromarray(np.stack((band1, band2, band3), axis=-1)) yield x_idx, y_idx, image def __write__(self, x_idx, y_idx, enlarge_tile): array = np.array(enlarge_tile) for i in range(array.shape[2]): self.__ret_ds__.GetRasterBand(i+1).WriteArray(array[:,:,i], x_idx*self.__tile_size__*4, y_idx*self.__tile_size__*4) def __del__(self): self.__ds__ = None self.__ret_ds__ = None #def run(self, x_idx = 0, y_idx = 0, tile_size = 256): # self.__x_idx__ = x_idx # self.__y_idx__ = y_idx # self.__tile_size__ = tile_size # if os.path.exists(self.__get_log_file__()): # self.__x_idx__, self.__y_idx__ = self.get_process() # for x_idx, y_idx, tile in self.__get_tile__(): # print(self.__img_path__, x_idx, y_idx, \\"/\\", self.__get_maxx__(), self.__get_maxy__()) # self.write_process(x_idx, y_idx) # enlarge = self.__super_resolution__(tile) # if enlarge: # self.__write__(x_idx, y_idx, enlarge) # if os.path.exists(self.__get_log_file__()): # os.rmdir(self.__get_log_file__()) def write_json(self): with open(self.__get_json_file__(), 'w') as fw: fw.write(json.dumps(self.__tile_list__)) def read_json(self): with open(self.__get_json_file__(), 'r') as fr: self.__tile_list__ = json.loads(fr.read()) def process_tile(self, tile_info): print('processing') x_idx = tile_info['x'] y_idx = tile_info['y'] tile_size = tile_info['t'] parent_conn, child_conn = Pipe() p1 = Process(target=superResolution, args=(parent_conn, self.__tile__(x_idx, y_idx, tile_size))) p1.start() ret = child_conn.recv() with open(f'test/{x_idx}-{y_idx}.jpg', wb) as fw: fw.write(ret) #try: # enlarge = self.__super_resolution__(self.__tile__(x_idx, y_idx, tile_size)) # with self.__locker__: # if enlarge: # self.__write__(x_idx, y_idx, enlarge) # self.write_json() # else: # self.__tile_list__.append(tile_info) #except Exception as e: # print(e) # print('processing exception') # self.__tile_list__.append(tile_info) def thread_run(self, tile_size = 256): self.__tile_size__ = tile_size if not os.path.exists(self.__get_json_file__()): self.__calc_tile_list__() self.write_json() else: self.read_json() thread_obj = thread_util(self.__thread_count__) while len(self.__tile_list__) &gt; 0: i = self.__tile_list__.pop() print(self.__img_path__, i['x'], i['y'], \\"/\\", self.__get_maxx__(), self.__get_maxy__()) thread_obj.process(self.process_tile, (i,), json.dumps(i)) thread_obj.wait() def run(self, tile_size = 256): self.__tile_size__ = tile_size if not os.path.exists(self.__get_json_file__()): self.__calc_tile_list__() self.write_json() else: self.read_json() while len(self.__tile_list__) &gt; 0: i = self.__tile_list__.pop() self.process_tile(i) #base_path = r'D:\\\\BaiduNetdiskDownload\\\\SuperResolution' base_path = r'E:\\\\BaiduNetdiskDownload\\\\FirstBatch' tif_list = map( lambda x: os.path.join(base_path, x), filter(lambda x: x.endswith('.tif'), os.listdir(base_path)) ) #for tif in tif_list: # if tif.lower().endswith('-enlarge.tif'): # continue # try: # TiffSuperResoluction(tif).run() # #TiffSuperResoluction(tif).run(tile_size=512) # except Exception as e: # print(\\"Exception\\") # else: # pass for tif in tif_list: if tif.lower().endswith('-enlarge.tif'): continue try: TiffSuperResoluction(tif, 2).thread_run() #TiffSuperResoluction(tif).run() except Exception as e: print(\\"Exception\\") print(e) else: pass"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-06T04:02:39.000Z"}],["meta",{"property":"article:author","content":"Haiyue"}],["meta",{"property":"article:tag","content":"gdal"}],["meta",{"property":"article:tag","content":"warp"}],["meta",{"property":"article:tag","content":"gcp"}],["meta",{"property":"article:published_time","content":"2023-07-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-06T04:02:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AI Super Resoluction\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-06T04:02:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Haiyue\\",\\"url\\":\\"https://jet-w.github.io/blog/\\"}]}"]]},"headers":[{"level":2,"title":"Client & Server","slug":"client-server","link":"#client-server","children":[]}],"git":{"createdTime":1701904828000,"updatedTime":1704513759000,"contributors":[{"name":"Haiyue","email":"nutterair1989@gmail.com","commits":3}]},"readingTime":{"minutes":6.76,"words":2028},"filePathRelative":"techniques/geoscience/enlarge.md","localizedDate":"July 10, 2023","excerpt":"<details class=\\"hint-container details\\"><summary>Single File to Super Resolution for Tiff</summary>\\n<p><code>conf.py</code></p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> environ\\n<span class=\\"token keyword\\">import</span> os\\n\\n\\n<span class=\\"token comment\\">## load environment file</span>\\nenviron<span class=\\"token punctuation\\">.</span>Env<span class=\\"token punctuation\\">.</span>read_env<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"base.env\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">## load GDAL DLL path</span>\\nenv <span class=\\"token operator\\">=</span> environ<span class=\\"token punctuation\\">.</span>Env<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\nos<span class=\\"token punctuation\\">.</span>add_dll_directory<span class=\\"token punctuation\\">(</span>env<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'GDAL_DLL'</span><span class=\\"token punctuation\\">,</span> default<span class=\\"token operator\\">=</span><span class=\\"token string\\">r'D:\\\\tools\\\\anaconda3-2023\\\\Library\\\\bin'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token comment\\">## load environment file</span>\\n    environ<span class=\\"token punctuation\\">.</span>Env<span class=\\"token punctuation\\">.</span>read_env<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"base.env\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token comment\\">## load GDAL DLL path</span>\\n    env <span class=\\"token operator\\">=</span> environ<span class=\\"token punctuation\\">.</span>Env<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    os<span class=\\"token punctuation\\">.</span>add_dll_directory<span class=\\"token punctuation\\">(</span>env<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'GDAL_DLL'</span><span class=\\"token punctuation\\">,</span> default<span class=\\"token operator\\">=</span><span class=\\"token string\\">r'D:\\\\tools\\\\anaconda3-2023\\\\Library\\\\bin'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><code> enlarge.py</code></p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> os\\n<span class=\\"token keyword\\">from</span> conf <span class=\\"token keyword\\">import</span> <span class=\\"token operator\\">*</span>\\ninit<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">from</span> osgeo <span class=\\"token keyword\\">import</span> gdal\\n<span class=\\"token keyword\\">from</span> PIL <span class=\\"token keyword\\">import</span> Image\\n<span class=\\"token keyword\\">import</span> numpy <span class=\\"token keyword\\">as</span> np\\n<span class=\\"token keyword\\">import</span> math\\n<span class=\\"token keyword\\">from</span> diffusers <span class=\\"token keyword\\">import</span> LDMSuperResolutionPipeline\\n<span class=\\"token keyword\\">import</span> torch\\n<span class=\\"token keyword\\">import</span> threading\\n<span class=\\"token keyword\\">from</span> threads <span class=\\"token keyword\\">import</span> <span class=\\"token operator\\">*</span>\\n<span class=\\"token keyword\\">import</span> copy\\n<span class=\\"token keyword\\">import</span> json\\n<span class=\\"token keyword\\">from</span> multiprocessing <span class=\\"token keyword\\">import</span> Process<span class=\\"token punctuation\\">,</span> Pipe\\n<span class=\\"token keyword\\">from</span> http_pool<span class=\\"token punctuation\\">.</span>http_pools <span class=\\"token keyword\\">import</span> Pool\\npipeline <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>\\n\\ndevice <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"cuda\\"</span> <span class=\\"token keyword\\">if</span> torch<span class=\\"token punctuation\\">.</span>cuda<span class=\\"token punctuation\\">.</span>is_available<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">else</span> <span class=\\"token string\\">\\"cpu\\"</span>\\nmodel_id <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"CompVis/ldm-super-resolution-4x-openimages\\"</span>\\npipeline <span class=\\"token operator\\">=</span> LDMSuperResolutionPipeline<span class=\\"token punctuation\\">.</span>from_pretrained<span class=\\"token punctuation\\">(</span>model_id<span class=\\"token punctuation\\">)</span>\\npipeline <span class=\\"token operator\\">=</span> pipeline<span class=\\"token punctuation\\">.</span>to<span class=\\"token punctuation\\">(</span>device<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">getPipeline</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token comment\\">#if None is not pipeline:</span>\\n    <span class=\\"token comment\\">#    return pipeline</span>\\n    device <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"cuda\\"</span> <span class=\\"token keyword\\">if</span> torch<span class=\\"token punctuation\\">.</span>cuda<span class=\\"token punctuation\\">.</span>is_available<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">else</span> <span class=\\"token string\\">\\"cpu\\"</span>\\n    model_id <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"CompVis/ldm-super-resolution-4x-openimages\\"</span>\\n    pipeline <span class=\\"token operator\\">=</span> LDMSuperResolutionPipeline<span class=\\"token punctuation\\">.</span>from_pretrained<span class=\\"token punctuation\\">(</span>model_id<span class=\\"token punctuation\\">)</span>\\n    pipeline <span class=\\"token operator\\">=</span> pipeline<span class=\\"token punctuation\\">.</span>to<span class=\\"token punctuation\\">(</span>device<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> pipeline\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">superResolution</span><span class=\\"token punctuation\\">(</span>pipe<span class=\\"token punctuation\\">,</span> img<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    Image<span class=\\"token punctuation\\">.</span>frombytes<span class=\\"token punctuation\\">(</span>img<span class=\\"token punctuation\\">)</span>\\n    enlarge <span class=\\"token operator\\">=</span> pipeline<span class=\\"token punctuation\\">(</span>img<span class=\\"token punctuation\\">)</span>\\n    pipe<span class=\\"token punctuation\\">.</span>send<span class=\\"token punctuation\\">(</span>enlarge<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'*****************************************************'</span><span class=\\"token punctuation\\">)</span>\\n\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TiffSuperResoluction</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__init__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> img_path<span class=\\"token punctuation\\">,</span> thread_count <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        self<span class=\\"token punctuation\\">.</span>__img_path__ <span class=\\"token operator\\">=</span> img_path\\n        self<span class=\\"token punctuation\\">.</span>__x_idx__ <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n        self<span class=\\"token punctuation\\">.</span>__y_idx__ <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n        self<span class=\\"token punctuation\\">.</span>__tile_size__ <span class=\\"token operator\\">=</span> <span class=\\"token number\\">256</span>\\n        self<span class=\\"token punctuation\\">.</span>__init_tif__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        self<span class=\\"token punctuation\\">.</span>__pipeline <span class=\\"token operator\\">=</span> getPipeline<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        self<span class=\\"token punctuation\\">.</span>__tile_list__ <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">list</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        self<span class=\\"token punctuation\\">.</span>__locker__ <span class=\\"token operator\\">=</span> threading<span class=\\"token punctuation\\">.</span>Lock<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        self<span class=\\"token punctuation\\">.</span>__read_locker__ <span class=\\"token operator\\">=</span> threading<span class=\\"token punctuation\\">.</span>Lock<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        self<span class=\\"token punctuation\\">.</span>__thread_count__ <span class=\\"token operator\\">=</span> thread_count\\n  \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__init_tif__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token comment\\"># Read Source file</span>\\n        self<span class=\\"token punctuation\\">.</span>__ds__ <span class=\\"token operator\\">=</span> gdal<span class=\\"token punctuation\\">.</span>Open<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__img_path__<span class=\\"token punctuation\\">,</span> gdal<span class=\\"token punctuation\\">.</span>GA_ReadOnly<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">if</span> self<span class=\\"token punctuation\\">.</span>__ds__ <span class=\\"token keyword\\">is</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"Could not open image file </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>self<span class=\\"token punctuation\\">.</span>__img_path__<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">None</span>\\n        trans <span class=\\"token operator\\">=</span> copy<span class=\\"token punctuation\\">.</span>copy<span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">list</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>GetGeoTransform<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        trans<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">/=</span><span class=\\"token number\\">4</span>\\n        trans<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">/=</span><span class=\\"token number\\">4</span>\\n        \\n        <span class=\\"token comment\\">## Create Output file</span>\\n        driver <span class=\\"token operator\\">=</span> gdal<span class=\\"token punctuation\\">.</span>GetDriverByName<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"GTiff\\"</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">if</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>exists<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_enlarge_file__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>__ret_ds__ <span class=\\"token operator\\">=</span> gdal<span class=\\"token punctuation\\">.</span>Open<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_enlarge_file__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> gdal<span class=\\"token punctuation\\">.</span>GA_Update<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>__ret_ds__ <span class=\\"token operator\\">=</span> driver<span class=\\"token punctuation\\">.</span>Create<span class=\\"token punctuation\\">(</span>\\n                self<span class=\\"token punctuation\\">.</span>__get_enlarge_file__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n                self<span class=\\"token punctuation\\">.</span>__get_width__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span>\\n                self<span class=\\"token punctuation\\">.</span>__get_height__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span>\\n                self<span class=\\"token punctuation\\">.</span>__get_band_count__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> \\n                gdal<span class=\\"token punctuation\\">.</span>GDT_Byte\\n            <span class=\\"token punctuation\\">)</span>\\n        self<span class=\\"token punctuation\\">.</span>__ret_ds__<span class=\\"token punctuation\\">.</span>SetGeoTransform<span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">tuple</span><span class=\\"token punctuation\\">(</span>trans<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__get_json_file__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        path<span class=\\"token punctuation\\">,</span> _ <span class=\\"token operator\\">=</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>splitext<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__img_path__<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>path<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">-enlarge.json\\"</span></span>\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__get_log_file__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        path<span class=\\"token punctuation\\">,</span> _ <span class=\\"token operator\\">=</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>splitext<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__img_path__<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>path<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">-enlarge.log\\"</span></span>\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__get_enlarge_file__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        path<span class=\\"token punctuation\\">,</span> ext <span class=\\"token operator\\">=</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>splitext<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__img_path__<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>path<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">-enlarge</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>ext<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__get_maxx__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">return</span> math<span class=\\"token punctuation\\">.</span>ceil<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>RasterXSize<span class=\\"token operator\\">/</span>self<span class=\\"token punctuation\\">.</span>__tile_size__<span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__get_maxy__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">return</span> math<span class=\\"token punctuation\\">.</span>ceil<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>RasterYSize<span class=\\"token operator\\">/</span>self<span class=\\"token punctuation\\">.</span>__tile_size__<span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__get_width__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n       <span class=\\"token keyword\\">return</span> self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>RasterXSize\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__get_height__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n       <span class=\\"token keyword\\">return</span> self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>RasterYSize\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__get_band_count__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n       <span class=\\"token keyword\\">return</span> self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>RasterCount\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__super_resolution__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> img<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        ret <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>\\n        <span class=\\"token keyword\\">try</span><span class=\\"token punctuation\\">:</span>\\n            ret <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__pipeline<span class=\\"token punctuation\\">(</span>img<span class=\\"token punctuation\\">,</span> num_inference_steps<span class=\\"token operator\\">=</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">,</span> eta<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>images<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span>\\n        <span class=\\"token keyword\\">except</span> Exception <span class=\\"token keyword\\">as</span> e<span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'error happened'</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">finally</span><span class=\\"token punctuation\\">:</span>\\n           <span class=\\"token keyword\\">return</span> ret\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">write_process</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> x_idx<span class=\\"token punctuation\\">,</span> y_idx<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">with</span> <span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_log_file__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'w'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> fw<span class=\\"token punctuation\\">:</span>\\n            fw<span class=\\"token punctuation\\">.</span>write<span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f'</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>x_idx<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\"> </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>y_idx<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">'</span></span><span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">write_tile_list</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> tile_list<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">with</span> <span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_json_file__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'w'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> fw<span class=\\"token punctuation\\">:</span>\\n            fw<span class=\\"token punctuation\\">.</span>write<span class=\\"token punctuation\\">(</span>json<span class=\\"token punctuation\\">.</span>dumps<span class=\\"token punctuation\\">(</span>tile_list<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">get_process</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        x_idx <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n        y_idx <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n        <span class=\\"token keyword\\">if</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>exists<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_log_file__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">with</span> <span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_log_file__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'r'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> fr<span class=\\"token punctuation\\">:</span>\\n                line <span class=\\"token operator\\">=</span> fr<span class=\\"token punctuation\\">.</span>readline<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n                x_idx<span class=\\"token punctuation\\">,</span> y_idx <span class=\\"token operator\\">=</span> line<span class=\\"token punctuation\\">.</span>split<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">)</span>\\n                x_idx <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">(</span>x_idx<span class=\\"token punctuation\\">)</span>\\n                y_idx <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">(</span>y_idx<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>x_idx<span class=\\"token punctuation\\">,</span> y_idx<span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__calc_tile_list__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">for</span> x_idx <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__x_idx__<span class=\\"token punctuation\\">,</span>self<span class=\\"token punctuation\\">.</span>__get_maxx__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">for</span> y_idx <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__y_idx__<span class=\\"token punctuation\\">,</span> math<span class=\\"token punctuation\\">.</span>ceil<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_maxy__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n                self<span class=\\"token punctuation\\">.</span>__tile_list__<span class=\\"token punctuation\\">.</span>append<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"x\\"</span><span class=\\"token punctuation\\">:</span> x_idx<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"y\\"</span><span class=\\"token punctuation\\">:</span> y_idx<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"t\\"</span><span class=\\"token punctuation\\">:</span> self<span class=\\"token punctuation\\">.</span>__tile_size__<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__tile__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> x_idx<span class=\\"token punctuation\\">,</span> y_idx<span class=\\"token punctuation\\">,</span> tile_size<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        temp <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__get_width__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> x_idx <span class=\\"token operator\\">*</span> tile_size\\n        width <span class=\\"token operator\\">=</span> tile_size <span class=\\"token keyword\\">if</span> temp <span class=\\"token operator\\">&gt;=</span> tile_size <span class=\\"token keyword\\">else</span> temp\\n        \\n        temp <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__get_height__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> y_idx <span class=\\"token operator\\">*</span> tile_size\\n        height <span class=\\"token operator\\">=</span> tile_size <span class=\\"token keyword\\">if</span> temp <span class=\\"token operator\\">&gt;=</span> tile_size <span class=\\"token keyword\\">else</span> temp\\n        \\n        x_offset <span class=\\"token operator\\">=</span> x_idx <span class=\\"token operator\\">*</span> tile_size\\n        y_offset <span class=\\"token operator\\">=</span> y_idx <span class=\\"token operator\\">*</span> tile_size\\n        \\n        band1 <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>\\n        band2 <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>\\n        band3 <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>\\n        <span class=\\"token keyword\\">with</span> self<span class=\\"token punctuation\\">.</span>__read_locker__<span class=\\"token punctuation\\">:</span>\\n            band1 <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>GetRasterBand<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>ReadAsArray<span class=\\"token punctuation\\">(</span>x_offset<span class=\\"token punctuation\\">,</span> y_offset<span class=\\"token punctuation\\">,</span> width<span class=\\"token punctuation\\">,</span> height<span class=\\"token punctuation\\">)</span>\\n            band2 <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>GetRasterBand<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>ReadAsArray<span class=\\"token punctuation\\">(</span>x_offset<span class=\\"token punctuation\\">,</span> y_offset<span class=\\"token punctuation\\">,</span> width<span class=\\"token punctuation\\">,</span> height<span class=\\"token punctuation\\">)</span>\\n            band3 <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>GetRasterBand<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>ReadAsArray<span class=\\"token punctuation\\">(</span>x_offset<span class=\\"token punctuation\\">,</span> y_offset<span class=\\"token punctuation\\">,</span> width<span class=\\"token punctuation\\">,</span> height<span class=\\"token punctuation\\">)</span>\\n        \\n        image <span class=\\"token operator\\">=</span> Image<span class=\\"token punctuation\\">.</span>fromarray<span class=\\"token punctuation\\">(</span>np<span class=\\"token punctuation\\">.</span>stack<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>band1<span class=\\"token punctuation\\">,</span> band2<span class=\\"token punctuation\\">,</span> band3<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> axis<span class=\\"token operator\\">=</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> image\\n    \\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__get_tile__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">for</span> x_idx <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__x_idx__<span class=\\"token punctuation\\">,</span>self<span class=\\"token punctuation\\">.</span>__get_maxx__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            temp <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__get_width__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> x_idx <span class=\\"token operator\\">*</span> self<span class=\\"token punctuation\\">.</span>__tile_size__\\n            width <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__tile_size__ <span class=\\"token keyword\\">if</span> temp <span class=\\"token operator\\">&gt;=</span> self<span class=\\"token punctuation\\">.</span>__tile_size__ <span class=\\"token keyword\\">else</span> temp\\n            <span class=\\"token keyword\\">for</span> y_idx <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__y_idx__<span class=\\"token punctuation\\">,</span> math<span class=\\"token punctuation\\">.</span>ceil<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_maxy__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n                temp <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__get_height__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> y_idx <span class=\\"token operator\\">*</span> self<span class=\\"token punctuation\\">.</span>__tile_size__\\n                height <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__tile_size__ <span class=\\"token keyword\\">if</span> temp <span class=\\"token operator\\">&gt;=</span> self<span class=\\"token punctuation\\">.</span>__tile_size__ <span class=\\"token keyword\\">else</span> temp\\n                \\n                x_offset <span class=\\"token operator\\">=</span> x_idx <span class=\\"token operator\\">*</span> self<span class=\\"token punctuation\\">.</span>__tile_size__\\n                y_offset <span class=\\"token operator\\">=</span> y_idx <span class=\\"token operator\\">*</span> self<span class=\\"token punctuation\\">.</span>__tile_size__\\n                \\n                band1 <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>GetRasterBand<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>ReadAsArray<span class=\\"token punctuation\\">(</span>x_offset<span class=\\"token punctuation\\">,</span> y_offset<span class=\\"token punctuation\\">,</span> width<span class=\\"token punctuation\\">,</span> height<span class=\\"token punctuation\\">)</span>\\n                band2 <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>GetRasterBand<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>ReadAsArray<span class=\\"token punctuation\\">(</span>x_offset<span class=\\"token punctuation\\">,</span> y_offset<span class=\\"token punctuation\\">,</span> width<span class=\\"token punctuation\\">,</span> height<span class=\\"token punctuation\\">)</span>\\n                band3 <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__ds__<span class=\\"token punctuation\\">.</span>GetRasterBand<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>ReadAsArray<span class=\\"token punctuation\\">(</span>x_offset<span class=\\"token punctuation\\">,</span> y_offset<span class=\\"token punctuation\\">,</span> width<span class=\\"token punctuation\\">,</span> height<span class=\\"token punctuation\\">)</span>\\n                \\n                image <span class=\\"token operator\\">=</span> Image<span class=\\"token punctuation\\">.</span>fromarray<span class=\\"token punctuation\\">(</span>np<span class=\\"token punctuation\\">.</span>stack<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>band1<span class=\\"token punctuation\\">,</span> band2<span class=\\"token punctuation\\">,</span> band3<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> axis<span class=\\"token operator\\">=</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token keyword\\">yield</span> x_idx<span class=\\"token punctuation\\">,</span> y_idx<span class=\\"token punctuation\\">,</span> image\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__write__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> x_idx<span class=\\"token punctuation\\">,</span> y_idx<span class=\\"token punctuation\\">,</span> enlarge_tile<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        array <span class=\\"token operator\\">=</span> np<span class=\\"token punctuation\\">.</span>array<span class=\\"token punctuation\\">(</span>enlarge_tile<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">for</span> i <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span>array<span class=\\"token punctuation\\">.</span>shape<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>__ret_ds__<span class=\\"token punctuation\\">.</span>GetRasterBand<span class=\\"token punctuation\\">(</span>i<span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>WriteArray<span class=\\"token punctuation\\">(</span>array<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">:</span><span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">:</span><span class=\\"token punctuation\\">,</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> x_idx<span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">.</span>__tile_size__<span class=\\"token operator\\">*</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> y_idx<span class=\\"token operator\\">*</span>self<span class=\\"token punctuation\\">.</span>__tile_size__<span class=\\"token operator\\">*</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__del__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        self<span class=\\"token punctuation\\">.</span>__ds__ <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>\\n        self<span class=\\"token punctuation\\">.</span>__ret_ds__ <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>\\n\\n    <span class=\\"token comment\\">#def run(self, x_idx = 0, y_idx = 0, tile_size = 256):</span>\\n    <span class=\\"token comment\\">#    self.__x_idx__ = x_idx</span>\\n    <span class=\\"token comment\\">#    self.__y_idx__ = y_idx</span>\\n    <span class=\\"token comment\\">#    self.__tile_size__ = tile_size</span>\\n    <span class=\\"token comment\\">#    if os.path.exists(self.__get_log_file__()):</span>\\n    <span class=\\"token comment\\">#        self.__x_idx__, self.__y_idx__ = self.get_process()</span>\\n    <span class=\\"token comment\\">#    for x_idx, y_idx, tile in self.__get_tile__():</span>\\n    <span class=\\"token comment\\">#        print(self.__img_path__, x_idx, y_idx, \\"/\\", self.__get_maxx__(), self.__get_maxy__())</span>\\n    <span class=\\"token comment\\">#        self.write_process(x_idx, y_idx)</span>\\n    <span class=\\"token comment\\">#        enlarge = self.__super_resolution__(tile)</span>\\n    <span class=\\"token comment\\">#        if enlarge:</span>\\n    <span class=\\"token comment\\">#            self.__write__(x_idx, y_idx, enlarge)</span>\\n    <span class=\\"token comment\\">#    if os.path.exists(self.__get_log_file__()):</span>\\n    <span class=\\"token comment\\">#        os.rmdir(self.__get_log_file__())</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">write_json</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">with</span> <span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_json_file__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'w'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> fw<span class=\\"token punctuation\\">:</span>\\n            fw<span class=\\"token punctuation\\">.</span>write<span class=\\"token punctuation\\">(</span>json<span class=\\"token punctuation\\">.</span>dumps<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__tile_list__<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">read_json</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">with</span> <span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_json_file__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'r'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> fr<span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>__tile_list__  <span class=\\"token operator\\">=</span> json<span class=\\"token punctuation\\">.</span>loads<span class=\\"token punctuation\\">(</span>fr<span class=\\"token punctuation\\">.</span>read<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">process_tile</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> tile_info<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'processing'</span><span class=\\"token punctuation\\">)</span>\\n        x_idx <span class=\\"token operator\\">=</span> tile_info<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'x'</span><span class=\\"token punctuation\\">]</span>\\n        y_idx <span class=\\"token operator\\">=</span> tile_info<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'y'</span><span class=\\"token punctuation\\">]</span>\\n        tile_size <span class=\\"token operator\\">=</span> tile_info<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'t'</span><span class=\\"token punctuation\\">]</span>\\n\\n        \\n        parent_conn<span class=\\"token punctuation\\">,</span> child_conn <span class=\\"token operator\\">=</span> Pipe<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        p1 <span class=\\"token operator\\">=</span> Process<span class=\\"token punctuation\\">(</span>target<span class=\\"token operator\\">=</span>superResolution<span class=\\"token punctuation\\">,</span> args<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>parent_conn<span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">.</span>__tile__<span class=\\"token punctuation\\">(</span>x_idx<span class=\\"token punctuation\\">,</span> y_idx<span class=\\"token punctuation\\">,</span> tile_size<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        p1<span class=\\"token punctuation\\">.</span>start<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        ret <span class=\\"token operator\\">=</span> child_conn<span class=\\"token punctuation\\">.</span>recv<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n        <span class=\\"token keyword\\">with</span> <span class=\\"token builtin\\">open</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f'test/</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>x_idx<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">-</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>y_idx<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">.jpg'</span></span><span class=\\"token punctuation\\">,</span> wb<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> fw<span class=\\"token punctuation\\">:</span>\\n            fw<span class=\\"token punctuation\\">.</span>write<span class=\\"token punctuation\\">(</span>ret<span class=\\"token punctuation\\">)</span>\\n\\n        <span class=\\"token comment\\">#try:</span>\\n        <span class=\\"token comment\\">#    enlarge = self.__super_resolution__(self.__tile__(x_idx, y_idx, tile_size))</span>\\n        <span class=\\"token comment\\">#    with self.__locker__:</span>\\n        <span class=\\"token comment\\">#        if enlarge:</span>\\n        <span class=\\"token comment\\">#            self.__write__(x_idx, y_idx, enlarge)</span>\\n        <span class=\\"token comment\\">#            self.write_json()</span>\\n        <span class=\\"token comment\\">#        else:</span>\\n        <span class=\\"token comment\\">#            self.__tile_list__.append(tile_info)</span>\\n        <span class=\\"token comment\\">#except Exception as e:</span>\\n        <span class=\\"token comment\\">#    print(e)</span>\\n        <span class=\\"token comment\\">#    print('processing exception')</span>\\n        <span class=\\"token comment\\">#    self.__tile_list__.append(tile_info)</span>\\n\\n\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">thread_run</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> tile_size <span class=\\"token operator\\">=</span> <span class=\\"token number\\">256</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        self<span class=\\"token punctuation\\">.</span>__tile_size__ <span class=\\"token operator\\">=</span> tile_size\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token keyword\\">not</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>exists<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_json_file__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>__calc_tile_list__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n            self<span class=\\"token punctuation\\">.</span>write_json<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>read_json<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        \\n        thread_obj <span class=\\"token operator\\">=</span> thread_util<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__thread_count__<span class=\\"token punctuation\\">)</span>\\n\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token builtin\\">len</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__tile_list__<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span>\\n            i <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__tile_list__<span class=\\"token punctuation\\">.</span>pop<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__img_path__<span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'x'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> i<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'y'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"/\\"</span><span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">.</span>__get_maxx__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> self<span class=\\"token punctuation\\">.</span>__get_maxy__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            thread_obj<span class=\\"token punctuation\\">.</span>process<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>process_tile<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> json<span class=\\"token punctuation\\">.</span>dumps<span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        thread_obj<span class=\\"token punctuation\\">.</span>wait<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> tile_size <span class=\\"token operator\\">=</span> <span class=\\"token number\\">256</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        self<span class=\\"token punctuation\\">.</span>__tile_size__ <span class=\\"token operator\\">=</span> tile_size\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token keyword\\">not</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>exists<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__get_json_file__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>__calc_tile_list__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n            self<span class=\\"token punctuation\\">.</span>write_json<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">:</span>\\n            self<span class=\\"token punctuation\\">.</span>read_json<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n        <span class=\\"token keyword\\">while</span> <span class=\\"token builtin\\">len</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>__tile_list__<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span>\\n            i <span class=\\"token operator\\">=</span> self<span class=\\"token punctuation\\">.</span>__tile_list__<span class=\\"token punctuation\\">.</span>pop<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n            self<span class=\\"token punctuation\\">.</span>process_tile<span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">#base_path = r'D:\\\\BaiduNetdiskDownload\\\\SuperResolution'</span>\\nbase_path <span class=\\"token operator\\">=</span> <span class=\\"token string\\">r'E:\\\\BaiduNetdiskDownload\\\\FirstBatch'</span>\\ntif_list <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">map</span><span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token keyword\\">lambda</span> x<span class=\\"token punctuation\\">:</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>join<span class=\\"token punctuation\\">(</span>base_path<span class=\\"token punctuation\\">,</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> \\n    <span class=\\"token builtin\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span> x<span class=\\"token punctuation\\">:</span> x<span class=\\"token punctuation\\">.</span>endswith<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'.tif'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> os<span class=\\"token punctuation\\">.</span>listdir<span class=\\"token punctuation\\">(</span>base_path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">#for tif in tif_list:</span>\\n<span class=\\"token comment\\">#    if tif.lower().endswith('-enlarge.tif'):</span>\\n<span class=\\"token comment\\">#        continue</span>\\n<span class=\\"token comment\\">#    try:</span>\\n<span class=\\"token comment\\">#        TiffSuperResoluction(tif).run()</span>\\n<span class=\\"token comment\\">#        #TiffSuperResoluction(tif).run(tile_size=512)</span>\\n<span class=\\"token comment\\">#    except Exception as e:</span>\\n<span class=\\"token comment\\">#        print(\\"Exception\\")</span>\\n<span class=\\"token comment\\">#    else:</span>\\n<span class=\\"token comment\\">#        pass</span>\\n\\n\\n<span class=\\"token keyword\\">for</span> tif <span class=\\"token keyword\\">in</span> tif_list<span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">if</span> tif<span class=\\"token punctuation\\">.</span>lower<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>endswith<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'-enlarge.tif'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">continue</span>\\n    <span class=\\"token keyword\\">try</span><span class=\\"token punctuation\\">:</span>\\n        TiffSuperResoluction<span class=\\"token punctuation\\">(</span>tif<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>thread_run<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token comment\\">#TiffSuperResoluction(tif).run()</span>\\n    <span class=\\"token keyword\\">except</span> Exception <span class=\\"token keyword\\">as</span> e<span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Exception\\"</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">pass</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></details>","autoDesc":true}`);export{n as data};
